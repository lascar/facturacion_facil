#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Utilitaire simple de correction de la persistance du logo
"""

import os
import sys
import tempfile
from PIL import Image

# Ajouter le r√©pertoire racine au path si n√©cessaire
if __name__ == "__main__":
    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.models import Organizacion
from utils.logo_manager import LogoManager


def diagnose_logo_issues():
    """Diagnostiquer les probl√®mes de logo"""
    print("üîç Diagnostic des probl√®mes de logo...")
    
    issues = []
    
    # V√©rifier l'organisation
    org = Organizacion.get()
    if not org or not org.nombre:
        issues.append("no_organization")
        print("   ‚ö†Ô∏è  Aucune organisation configur√©e")
        return issues
    
    print(f"   ‚úÖ Organisation trouv√©e: {org.nombre}")
    
    # V√©rifier le logo configur√©
    if not org.logo_path:
        issues.append("no_logo_configured")
        print("   ‚ö†Ô∏è  Aucun logo configur√©")
        return issues
    
    print(f"   ‚úÖ Logo configur√©: {org.logo_path}")
    
    # V√©rifier l'existence du fichier
    if not os.path.exists(org.logo_path):
        issues.append("logo_file_missing")
        print(f"   ‚ùå Fichier logo manquant: {org.logo_path}")
        return issues
    
    print("   ‚úÖ Fichier logo existe")
    
    # V√©rifier le r√©pertoire permanent
    logo_manager = LogoManager()
    if logo_manager.logo_directory not in org.logo_path:
        issues.append("logo_not_permanent")
        print(f"   ‚ö†Ô∏è  Logo pas dans r√©pertoire permanent: {org.logo_path}")
    else:
        print("   ‚úÖ Logo dans r√©pertoire permanent")
    
    # V√©rifier la chargeabilit√©
    try:
        with Image.open(org.logo_path) as img:
            print(f"   ‚úÖ Logo chargeable: {img.size}")
    except Exception as e:
        issues.append("logo_not_loadable")
        print(f"   ‚ùå Logo non chargeable: {e}")
    
    if not issues:
        print("   üéâ Aucun probl√®me de logo d√©tect√©")
    
    return issues


def create_demo_organization():
    """Cr√©er une organisation de d√©monstration avec logo"""
    print("üé® Cr√©ation d'une organisation de d√©monstration...")
    
    try:
        logo_manager = LogoManager()
        
        # Cr√©er un logo de d√©monstration
        temp_dir = tempfile.mkdtemp()
        temp_logo = os.path.join(temp_dir, "demo_logo.png")
        
        # Cr√©er une image simple
        img = Image.new('RGB', (200, 100), color='#2E86AB')
        img.save(temp_logo)
        
        # Copier vers r√©pertoire permanent
        permanent_logo = logo_manager.save_logo(temp_logo, "Empresa Demo")
        
        if permanent_logo:
            # Cr√©er organisation
            org = Organizacion(
                nombre="Empresa Demo",
                direccion="123 Calle Demo, Madrid, Espa√±a",
                telefono="+34 91 123 45 67",
                email="demo@empresa.com",
                cif="B12345678",
                logo_path=permanent_logo
            )
            org.save()
            
            print(f"   ‚úÖ Organisation cr√©√©e: {org.nombre}")
            print(f"   ‚úÖ Logo configur√©: {permanent_logo}")
            
            # Nettoyer
            os.remove(temp_logo)
            os.rmdir(temp_dir)
            
            return True
        else:
            print("   ‚ùå √âchec cr√©ation logo permanent")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur cr√©ation organisation: {e}")
        return False


def move_logo_to_permanent():
    """D√©placer le logo vers le r√©pertoire permanent"""
    print("üîß D√©placement du logo vers le r√©pertoire permanent...")
    
    try:
        org = Organizacion.get()
        if not org or not org.logo_path:
            return False
        
        logo_manager = LogoManager()
        
        # Copier vers r√©pertoire permanent
        permanent_logo = logo_manager.save_logo(org.logo_path, org.nombre)
        
        if permanent_logo:
            # Mettre √† jour l'organisation
            org.logo_path = permanent_logo
            org.save()
            
            print(f"   ‚úÖ Logo d√©plac√© vers: {permanent_logo}")
            return True
        else:
            print("   ‚ùå √âchec d√©placement logo")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur d√©placement logo: {e}")
        return False


def fix_logo_persistence():
    """Corriger les probl√®mes de persistance du logo"""
    print("üîß Correction des probl√®mes de persistance...")
    
    issues = diagnose_logo_issues()
    
    if "no_organization" in issues:
        print("   ‚Üí Cr√©ation d'une organisation de d√©monstration...")
        return create_demo_organization()
    
    if "no_logo_configured" in issues:
        print("   ‚Üí Aucun logo √† corriger")
        return True
    
    if "logo_file_missing" in issues:
        print("   ‚Üí Fichier logo manquant - impossible de corriger automatiquement")
        print("   üí° Solution: s√©lectionner un nouveau logo dans l'interface")
        return False
    
    if "logo_not_permanent" in issues:
        print("   ‚Üí D√©placement vers r√©pertoire permanent...")
        return move_logo_to_permanent()
    
    if "logo_not_loadable" in issues:
        print("   ‚Üí Logo corrompu - impossible de corriger automatiquement")
        print("   üí° Solution: s√©lectionner un nouveau logo dans l'interface")
        return False
    
    print("   ‚Üí Aucune correction n√©cessaire")
    return True


def verify_logo_persistence():
    """V√©rifier que le logo persiste correctement"""
    print("üîç V√©rification de la persistance...")
    
    # Test 1: V√©rifier l'√©tat actuel
    issues = diagnose_logo_issues()
    if issues:
        print(f"   ‚ùå Probl√®mes d√©tect√©s: {issues}")
        return False
    
    # Test 2: Simuler red√©marrage (nouvelle instance)
    org = Organizacion.get()
    if not org or not org.logo_path:
        print("   ‚ùå Aucune organisation ou logo apr√®s red√©marrage simul√©")
        return False
    
    # Test 3: V√©rifier l'existence du fichier
    if not os.path.exists(org.logo_path):
        print(f"   ‚ùå Fichier logo manquant apr√®s red√©marrage: {org.logo_path}")
        return False
    
    # Test 4: V√©rifier la chargeabilit√©
    try:
        with Image.open(org.logo_path) as img:
            print(f"   ‚úÖ Logo persistant et chargeable: {img.size}")
            return True
    except Exception as e:
        print(f"   ‚ùå Logo non chargeable apr√®s red√©marrage: {e}")
        return False


def main():
    """Fonction principale"""
    print("üîß Utilitaire de correction de la persistance du logo")
    print("=" * 55)
    
    # √âtape 1: Diagnostic
    print("\nüìã √âtape 1: Diagnostic...")
    issues = diagnose_logo_issues()
    
    # √âtape 2: Correction
    print("\nüîß √âtape 2: Correction...")
    fix_success = fix_logo_persistence()
    
    if not fix_success:
        print("\n‚ùå Correction √©chou√©e!")
        return False
    
    # √âtape 3: V√©rification
    print("\n‚úÖ √âtape 3: V√©rification...")
    verify_success = verify_logo_persistence()
    
    if verify_success:
        print("\nüéâ Correction compl√®te r√©ussie!")
        print("Le logo devrait maintenant persister entre les red√©marrages.")
        return True
    else:
        print("\n‚ùå √âchec de la v√©rification!")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
