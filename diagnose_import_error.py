#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de diagn√≥stico para problemas de importaci√≥n
"""

import sys
import os
from pathlib import Path

def diagnose_import_problem():
    """Diagnosticar problemas de importaci√≥n"""
    print("üîç DIAGN√ìSTICO DE IMPORTACI√ìN")
    print("=" * 40)
    
    # 1. Verificar Python y sistema
    print(f"üêç Python: {sys.version}")
    print(f"üíª Sistema: {sys.platform}")
    print(f"üìÅ Directorio actual: {os.getcwd()}")
    print(f"üõ§Ô∏è  Python path: {sys.path[:3]}...")  # Solo primeros 3
    
    # 2. Verificar estructura de archivos
    print("\nüìÅ ESTRUCTURA DE ARCHIVOS:")
    
    files_to_check = [
        'main.py',
        'common/__init__.py',
        'common/simple_producto_autocomplete.py',
        'ui/__init__.py',
        'ui/producto_factura_dialog.py',
        'ui/facturas_methods.py',
    ]
    
    for file_path in files_to_check:
        path = Path(file_path)
        if path.exists():
            size = path.stat().st_size
            print(f"  ‚úÖ {file_path} ({size} bytes)")
        else:
            print(f"  ‚ùå {file_path} - NO EXISTE")
    
    # 3. Verificar importaciones paso a paso
    print("\nüîç PRUEBAS DE IMPORTACI√ìN:")
    
    import_tests = [
        ("import sys", "Sistema b√°sico"),
        ("import os", "OS b√°sico"),
        ("import pathlib", "Pathlib"),
        ("import customtkinter", "CustomTkinter"),
        ("import tkinter", "Tkinter"),
        ("from database.models import Producto", "Modelos de base de datos"),
        ("from utils.logger import get_logger", "Logger"),
        ("import common", "Paquete common"),
        ("from common import simple_producto_autocomplete", "M√≥dulo espec√≠fico"),
        ("from common.simple_producto_autocomplete import SimpleProductoAutocomplete", "Clase espec√≠fica"),
    ]
    
    for import_cmd, description in import_tests:
        try:
            exec(import_cmd)
            print(f"  ‚úÖ {description}")
        except Exception as e:
            print(f"  ‚ùå {description}: {e}")
    
    # 4. Verificar contenido del archivo problem√°tico
    print("\nüìÑ VERIFICACI√ìN DE ARCHIVO:")
    
    file_path = Path('common/simple_producto_autocomplete.py')
    if file_path.exists():
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            print(f"  üìè Tama√±o: {len(content)} caracteres")
            print(f"  üìù L√≠neas: {len(content.splitlines())}")
            
            # Verificar primeras l√≠neas
            lines = content.splitlines()[:10]
            print("  üîç Primeras l√≠neas:")
            for i, line in enumerate(lines, 1):
                print(f"    {i:2d}: {line[:60]}{'...' if len(line) > 60 else ''}")
            
            # Verificar si hay caracteres problem√°ticos
            if '\r\n' in content:
                print("  ‚ö†Ô∏è  Contiene terminadores Windows (\\r\\n)")
            if '\x00' in content:
                print("  ‚ùå Contiene caracteres nulos")
            
        except Exception as e:
            print(f"  ‚ùå Error leyendo archivo: {e}")
    
    # 5. Verificar cache de Python
    print("\nüóÇÔ∏è  CACHE DE PYTHON:")
    
    cache_dirs = [
        'common/__pycache__',
        '__pycache__',
    ]
    
    for cache_dir in cache_dirs:
        cache_path = Path(cache_dir)
        if cache_path.exists():
            cache_files = list(cache_path.glob('*.pyc'))
            print(f"  üìÅ {cache_dir}: {len(cache_files)} archivos .pyc")
            
            # Verificar archivo espec√≠fico
            target_cache = cache_path / 'simple_producto_autocomplete.cpython-*.pyc'
            matching_cache = list(cache_path.glob('simple_producto_autocomplete.cpython-*.pyc'))
            if matching_cache:
                print(f"    ‚úÖ Cache encontrado: {matching_cache[0].name}")
            else:
                print(f"    ‚ùå Cache no encontrado para simple_producto_autocomplete")
    
    # 6. Sugerencias de soluci√≥n
    print("\nüí° SUGERENCIAS DE SOLUCI√ìN:")
    print("  1. Limpiar cache: rm -rf __pycache__ common/__pycache__")
    print("  2. Verificar encoding: archivo debe ser UTF-8")
    print("  3. Verificar permisos de archivo")
    print("  4. Reinstalar dependencias: pip install --force-reinstall customtkinter")
    print("  5. Verificar PYTHONPATH")

def create_minimal_test():
    """Crear test m√≠nimo del m√≥dulo problem√°tico"""
    print("\nüß™ CREANDO TEST M√çNIMO...")
    
    test_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test m√≠nimo para simple_producto_autocomplete
"""

def test_import():
    """Test de importaci√≥n paso a paso"""
    print("üß™ Test de importaci√≥n...")
    
    try:
        print("  1. Importando customtkinter...")
        import customtkinter as ctk
        print("    ‚úÖ customtkinter OK")
        
        print("  2. Importando tkinter...")
        import tkinter as tk
        print("    ‚úÖ tkinter OK")
        
        print("  3. Importando typing...")
        from typing import List, Dict, Callable, Optional
        print("    ‚úÖ typing OK")
        
        print("  4. Importando database.models...")
        from database.models import Producto, Stock
        print("    ‚úÖ database.models OK")
        
        print("  5. Importando utils.logger...")
        from utils.logger import get_logger
        print("    ‚úÖ utils.logger OK")
        
        print("  6. Importando el m√≥dulo problem√°tico...")
        from common.simple_producto_autocomplete import SimpleProductoAutocomplete
        print("    ‚úÖ SimpleProductoAutocomplete OK")
        
        print("üéâ TODAS LAS IMPORTACIONES EXITOSAS")
        return True
        
    except Exception as e:
        print(f"    ‚ùå ERROR: {e}")
        import traceback
        print(f"    üìÑ Traceback: {traceback.format_exc()}")
        return False

if __name__ == "__main__":
    test_import()
'''
    
    with open('test_import_minimal.py', 'w', encoding='utf-8') as f:
        f.write(test_content)
    
    print("  ‚úÖ Creado: test_import_minimal.py")
    print("  üí° Ejecuta: python test_import_minimal.py")

if __name__ == "__main__":
    try:
        diagnose_import_problem()
        create_minimal_test()
        
        print("\n" + "="*40)
        print("üéØ DIAGN√ìSTICO COMPLETADO")
        print("üí° Ejecuta tambi√©n: python test_import_minimal.py")
        
    except Exception as e:
        print(f"\n‚ùå Error en diagn√≥stico: {e}")
        import traceback
        traceback.print_exc()
