#!/usr/bin/env python3
"""
Tests unitaires pour le FileManager et ImageFileManager
Tests de la nouvelle architecture factor√©e
"""

import sys
import os
import tempfile
import shutil
from pathlib import Path

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

def create_test_image(path, format='PNG'):
    """Cr√©er une image de test valide avec PIL"""
    try:
        from PIL import Image
        
        # Cr√©er une image simple 10x10 pixels
        if format.upper() == 'JPEG':
            img = Image.new('RGB', (10, 10), color='red')
            img.save(path, 'JPEG')
        else:
            img = Image.new('RGBA', (10, 10), color='blue')
            img.save(path, 'PNG')
            
    except Exception as e:
        print(f"Erreur cr√©ation image test: {e}")
        # Fallback: cr√©er un fichier vide
        with open(path, 'w') as f:
            f.write("")

def test_file_manager_basic():
    """Test des fonctionnalit√©s de base du FileManager"""
    print("üß™ Test: FileManager fonctionnalit√©s de base")
    
    try:
        from utils.file_manager import FileManager
        
        # Cr√©er un r√©pertoire temporaire pour les tests
        temp_source_dir = tempfile.mkdtemp()
        temp_file_path = os.path.join(temp_source_dir, 'test_file.txt')
        
        # Cr√©er un fichier de test
        with open(temp_file_path, 'w') as f:
            f.write("Test content")
        
        try:
            # Cr√©er FileManager avec r√©pertoire temporaire
            file_manager = FileManager(base_directory=temp_source_dir, subdirectory="test_files")
            
            print(f"   üìÅ R√©pertoire stockage: {file_manager.storage_directory}")
            print(f"   üìÑ Fichier source: {temp_file_path}")
            
            # Test 1: Sauvegarder fichier
            print("\n   1Ô∏è‚É£ Test sauvegarde fichier")
            
            saved_path = file_manager.save_file(temp_file_path, "test_prefix")
            
            assert saved_path is not None, "Sauvegarde fichier √©chou√©e"
            assert os.path.exists(saved_path), f"Fichier sauvegard√© n'existe pas: {saved_path}"
            assert saved_path.startswith(file_manager.storage_directory), f"Fichier pas dans bon r√©pertoire: {saved_path}"
            
            print(f"   ‚úÖ Fichier sauvegard√©: {os.path.basename(saved_path)}")
            
            # Test 2: V√©rifier info fichier
            print("\n   2Ô∏è‚É£ Test info fichier")
            
            info = file_manager.get_file_info(saved_path)
            
            assert info['exists'] == True, "Fichier info indique qu'il n'existe pas"
            assert info['size'] > 0, f"Taille fichier incorrecte: {info['size']}"
            assert info['extension'] == '.txt', f"Extension incorrecte: {info['extension']}"
            
            print(f"   ‚úÖ Info fichier: {info['extension']} ({info['size']} bytes)")
            
            # Test 3: Lister fichiers
            print("\n   3Ô∏è‚É£ Test listage fichiers")
            
            files = file_manager.list_files()
            
            assert len(files) >= 1, f"Aucun fichier trouv√©: {files}"
            assert saved_path in files, f"Fichier sauvegard√© non trouv√© dans liste: {saved_path}"
            
            print(f"   ‚úÖ Fichiers trouv√©s: {len(files)}")
            
            # Test 4: Supprimer fichier
            print("\n   4Ô∏è‚É£ Test suppression fichier")
            
            success = file_manager.remove_file(saved_path)
            
            assert success == True, "Suppression fichier √©chou√©e"
            assert not os.path.exists(saved_path), f"Fichier toujours pr√©sent apr√®s suppression: {saved_path}"
            
            print("   ‚úÖ Fichier supprim√© avec succ√®s")
            
            print("\nüéâ TOUS LES TESTS FILEMANAGER PASSENT")
            return True
            
        finally:
            # Nettoyage
            try:
                if os.path.exists(temp_source_dir):
                    shutil.rmtree(temp_source_dir)
            except:
                pass
                
    except Exception as e:
        print(f"   ‚ùå ERREUR: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_image_file_manager():
    """Test du ImageFileManager sp√©cialis√©"""
    print("\nüß™ Test: ImageFileManager sp√©cialis√©")
    
    try:
        from utils.file_manager import ImageFileManager
        
        # Cr√©er un r√©pertoire temporaire pour les tests
        temp_source_dir = tempfile.mkdtemp()
        temp_image_path = os.path.join(temp_source_dir, 'test_image.png')
        temp_invalid_path = os.path.join(temp_source_dir, 'invalid.txt')
        
        # Cr√©er une image de test et un fichier invalide
        create_test_image(temp_image_path, 'PNG')
        with open(temp_invalid_path, 'w') as f:
            f.write("Not an image")
        
        try:
            # Cr√©er ImageFileManager
            image_manager = ImageFileManager(subdirectory="test_images")
            
            print(f"   üìÅ R√©pertoire images: {image_manager.storage_directory}")
            print(f"   üñºÔ∏è Image source: {temp_image_path}")
            print(f"   üìÑ Fichier invalide: {temp_invalid_path}")
            
            # Test 1: Validation d'image
            print("\n   1Ô∏è‚É£ Test validation images")
            
            is_valid_image = image_manager.is_valid_image(temp_image_path)
            is_invalid_image = image_manager.is_valid_image(temp_invalid_path)
            
            assert is_valid_image == True, f"Image valide non reconnue: {temp_image_path}"
            assert is_invalid_image == False, f"Fichier invalide reconnu comme image: {temp_invalid_path}"
            
            print("   ‚úÖ Validation images fonctionne")
            
            # Test 2: Sauvegarder image valide
            print("\n   2Ô∏è‚É£ Test sauvegarde image valide")
            
            saved_image = image_manager.save_file(temp_image_path, "test_image")
            
            assert saved_image is not None, "Sauvegarde image valide √©chou√©e"
            assert os.path.exists(saved_image), f"Image sauvegard√©e n'existe pas: {saved_image}"
            
            print(f"   ‚úÖ Image valide sauvegard√©e: {os.path.basename(saved_image)}")
            
            # Test 3: Rejeter fichier invalide
            print("\n   3Ô∏è‚É£ Test rejet fichier invalide")
            
            saved_invalid = image_manager.save_file(temp_invalid_path, "invalid_image")
            
            assert saved_invalid is None, f"Fichier invalide accept√©: {saved_invalid}"
            
            print("   ‚úÖ Fichier invalide correctement rejet√©")
            
            # Test 4: Info image d√©taill√©e
            print("\n   4Ô∏è‚É£ Test info image d√©taill√©e")
            
            image_info = image_manager.get_image_info(saved_image)
            
            assert image_info['exists'] == True, "Image info indique qu'elle n'existe pas"
            assert image_info['format'] == 'PNG', f"Format incorrect: {image_info['format']}"
            assert image_info['dimensions'] == (10, 10), f"Dimensions incorrectes: {image_info['dimensions']}"
            
            print(f"   ‚úÖ Info image: {image_info['format']} {image_info['size_str']}")
            
            # Test 5: Lister images
            print("\n   5Ô∏è‚É£ Test listage images")
            
            images = image_manager.list_images()
            
            assert len(images) >= 1, f"Aucune image trouv√©e: {images}"
            assert saved_image in images, f"Image sauvegard√©e non trouv√©e: {saved_image}"
            
            print(f"   ‚úÖ Images trouv√©es: {len(images)}")
            
            # Nettoyage
            image_manager.remove_file(saved_image)
            
            print("\nüéâ TOUS LES TESTS IMAGEFILEMANAGER PASSENT")
            return True
            
        finally:
            # Nettoyage
            try:
                if os.path.exists(temp_source_dir):
                    shutil.rmtree(temp_source_dir)
            except:
                pass
                
    except Exception as e:
        print(f"   ‚ùå ERREUR: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_logo_manager_refactored():
    """Test du LogoManager refactor√©"""
    print("\nüß™ Test: LogoManager refactor√©")
    
    try:
        from utils.logo_manager import LogoManager
        
        # Cr√©er un r√©pertoire temporaire pour les tests
        temp_source_dir = tempfile.mkdtemp()
        temp_logo_path = os.path.join(temp_source_dir, 'test_logo.png')
        create_test_image(temp_logo_path, 'PNG')
        
        try:
            # Cr√©er LogoManager
            logo_manager = LogoManager()
            
            print(f"   üìÅ R√©pertoire logos: {logo_manager.logo_directory}")
            print(f"   üñºÔ∏è Logo source: {temp_logo_path}")
            
            # Test 1: Sauvegarder logo (utilise FileManager en interne)
            print("\n   1Ô∏è‚É£ Test sauvegarde logo refactor√©")
            
            saved_logo = logo_manager.save_logo(temp_logo_path, "Test Company")
            
            assert saved_logo is not None, "Sauvegarde logo √©chou√©e"
            assert os.path.exists(saved_logo), f"Logo sauvegard√© n'existe pas: {saved_logo}"
            assert "Test_Company_logo" in os.path.basename(saved_logo), f"Nom logo incorrect: {saved_logo}"
            
            print(f"   ‚úÖ Logo sauvegard√©: {os.path.basename(saved_logo)}")
            
            # Test 2: Info logo (utilise ImageFileManager)
            print("\n   2Ô∏è‚É£ Test info logo refactor√©")
            
            logo_info = logo_manager.get_logo_info(saved_logo)
            
            assert logo_info['exists'] == True, "Logo info indique qu'il n'existe pas"
            assert logo_info['format'] == 'PNG', f"Format incorrect: {logo_info['format']}"
            assert 'dimensions' in logo_info, "Dimensions manquantes dans info"
            
            print(f"   ‚úÖ Info logo: {logo_info['format']} {logo_info.get('size_str', 'N/A')}")
            
            # Test 3: Lister logos (utilise ImageFileManager)
            print("\n   3Ô∏è‚É£ Test listage logos refactor√©")
            
            logos = logo_manager.list_logos()
            
            assert len(logos) >= 1, f"Aucun logo trouv√©: {logos}"
            assert saved_logo in logos, f"Logo sauvegard√© non trouv√©: {saved_logo}"
            
            print(f"   ‚úÖ Logos trouv√©s: {len(logos)}")
            
            # Test 4: Supprimer logo (utilise FileManager)
            print("\n   4Ô∏è‚É£ Test suppression logo refactor√©")
            
            success = logo_manager.remove_logo(saved_logo)
            
            assert success == True, "Suppression logo √©chou√©e"
            assert not os.path.exists(saved_logo), f"Logo toujours pr√©sent: {saved_logo}"
            
            print("   ‚úÖ Logo supprim√© avec succ√®s")
            
            print("\nüéâ LOGOMANAGER REFACTOR√â FONCTIONNE")
            return True
            
        finally:
            # Nettoyage
            try:
                if os.path.exists(temp_source_dir):
                    shutil.rmtree(temp_source_dir)
            except:
                pass
                
    except Exception as e:
        print(f"   ‚ùå ERREUR: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üîß Tests unitaires - Architecture factor√©e")
    print("=" * 50)
    
    success1 = test_file_manager_basic()
    success2 = test_image_file_manager()
    success3 = test_logo_manager_refactored()
    
    if success1 and success2 and success3:
        print("\nüéâ TOUS LES TESTS DE L'ARCHITECTURE FACTOR√âE PASSENT")
        print("\n‚úÖ FACTORISATION VALID√âE:")
        print("   ‚Ä¢ FileManager: Gestion g√©n√©rique de fichiers")
        print("   ‚Ä¢ ImageFileManager: Sp√©cialisation pour images")
        print("   ‚Ä¢ LogoManager: Simplifi√© et r√©utilise les composants")
        print("   ‚Ä¢ Code plus simple et maintenable")
        print("\nüí° L'architecture factor√©e est op√©rationnelle !")
        sys.exit(0)
    else:
        print("\n‚ùå CERTAINS TESTS √âCHOUENT")
        sys.exit(1)
