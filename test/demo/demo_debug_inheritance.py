#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Diagnostic de l'h√©ritage et des m√©thodes dans FacturasWindow
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

import inspect
from ui.facturas import FacturasWindow
from ui.facturas_methods import FacturasMethodsMixin
from common.ui_components import BaseWindow

def debug_inheritance():
    """Diagnostiquer l'h√©ritage et les m√©thodes disponibles"""
    
    print("üîç DIAGNOSTIC - H√©ritage et M√©thodes")
    print("=" * 50)
    
    print("1Ô∏è‚É£ V√©rification de l'h√©ritage...")
    print(f"   FacturasWindow MRO: {[cls.__name__ for cls in FacturasWindow.__mro__]}")
    
    print("\n2Ô∏è‚É£ V√©rification des m√©thodes cl√©s...")
    
    methods_to_check = [
        'guardar_factura',
        'update_stock_after_save',
        'show_stock_impact_summary',
        'validate_factura_form',
        'validate_stock_availability'
    ]
    
    for method_name in methods_to_check:
        print(f"\n   üîç M√©thode: {method_name}")
        
        # V√©rifier dans FacturasMethodsMixin
        if hasattr(FacturasMethodsMixin, method_name):
            method = getattr(FacturasMethodsMixin, method_name)
            print(f"      ‚úÖ Existe dans FacturasMethodsMixin")
            print(f"         Fichier: {inspect.getfile(method)}")
            print(f"         Ligne: {inspect.getsourcelines(method)[1]}")
        else:
            print(f"      ‚ùå NO existe dans FacturasMethodsMixin")
        
        # V√©rifier dans FacturasWindow
        if hasattr(FacturasWindow, method_name):
            method = getattr(FacturasWindow, method_name)
            print(f"      ‚úÖ Disponible dans FacturasWindow")
            print(f"         D√©finie dans: {method.__qualname__}")
        else:
            print(f"      ‚ùå NO disponible dans FacturasWindow")
    
    print("\n3Ô∏è‚É£ V√©rification de la r√©solution de m√©thodes...")
    
    # Cr√©er une instance fictive pour tester
    try:
        import customtkinter as ctk
        app = ctk.CTk()
        app.withdraw()  # Cacher la fen√™tre
        
        # Cr√©er instance de FacturasWindow
        facturas_window = FacturasWindow(app)
        
        print("   ‚úÖ Instance FacturasWindow cr√©√©e avec succ√®s")
        
        # V√©rifier les m√©thodes sur l'instance
        for method_name in methods_to_check:
            if hasattr(facturas_window, method_name):
                method = getattr(facturas_window, method_name)
                print(f"      ‚úÖ {method_name}: {method}")
                print(f"         Type: {type(method)}")
                print(f"         Callable: {callable(method)}")
            else:
                print(f"      ‚ùå {method_name}: NO disponible sur l'instance")
        
        # Fermer l'application
        app.quit()
        app.destroy()
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la cr√©ation de l'instance: {e}")
    
    print("\n4Ô∏è‚É£ V√©rification du code source...")
    
    try:
        # V√©rifier le code source de guardar_factura
        if hasattr(FacturasMethodsMixin, 'guardar_factura'):
            method = getattr(FacturasMethodsMixin, 'guardar_factura')
            source_lines = inspect.getsourcelines(method)[0]
            
            print(f"   üìÑ Code source de guardar_factura (premi√®res lignes):")
            for i, line in enumerate(source_lines[:10], 1):
                print(f"      {i:2d}: {line.rstrip()}")
            
            # Chercher l'appel √† update_stock_after_save
            update_stock_call_found = False
            for line_num, line in enumerate(source_lines, 1):
                if 'update_stock_after_save' in line:
                    print(f"   ‚úÖ Appel √† update_stock_after_save trouv√© ligne {line_num}: {line.strip()}")
                    update_stock_call_found = True
            
            if not update_stock_call_found:
                print(f"   ‚ùå Appel √† update_stock_after_save NOT trouv√© dans guardar_factura")
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification du code source: {e}")
    
    print("\n5Ô∏è‚É£ V√©rification des imports...")
    
    # V√©rifier les imports dans facturas.py
    try:
        import ui.facturas as facturas_module
        
        print("   üì¶ Imports dans ui.facturas:")
        
        # V√©rifier si FacturasMethodsMixin est import√©
        if hasattr(facturas_module, 'FacturasMethodsMixin'):
            print("      ‚úÖ FacturasMethodsMixin import√©")
        else:
            print("      ‚ùå FacturasMethodsMixin NOT import√©")
        
        # V√©rifier les autres imports importants
        important_imports = ['Stock', 'Factura', 'FacturaItem', 'Producto']
        for imp in important_imports:
            if hasattr(facturas_module, imp):
                print(f"      ‚úÖ {imp} import√©")
            else:
                print(f"      ‚ùå {imp} NOT import√©")
    
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification des imports: {e}")

def demo_method_resolution():
    """Tester la r√©solution de m√©thodes avec un exemple simple"""
    
    print("\nüß™ TEST - R√©solution de M√©thodes")
    print("-" * 40)
    
    try:
        # Cr√©er une classe de test qui simule FacturasWindow
        class TestFacturasWindow(BaseWindow, FacturasMethodsMixin):
            def __init__(self):
                # Simuler l'initialisation minimale
                self.logger = None
                self.current_factura = None
                self.factura_items = []
                self.window = None
            
            def _show_message(self, msg_type, title, message):
                print(f"[TEST MESSAGE] {msg_type}: {title} - {message}")
        
        # Cr√©er instance de test
        test_instance = TestFacturasWindow()
        
        print("   ‚úÖ Instance de test cr√©√©e")
        
        # V√©rifier les m√©thodes
        methods_to_test = ['guardar_factura', 'update_stock_after_save']
        
        for method_name in methods_to_test:
            if hasattr(test_instance, method_name):
                method = getattr(test_instance, method_name)
                print(f"   ‚úÖ {method_name}: Disponible")
                print(f"      Type: {type(method)}")
                print(f"      Module: {method.__module__ if hasattr(method, '__module__') else 'N/A'}")
                print(f"      Qualname: {method.__qualname__ if hasattr(method, '__qualname__') else 'N/A'}")
            else:
                print(f"   ‚ùå {method_name}: NOT disponible")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur dans le test de r√©solution: {e}")
        import traceback
        traceback.print_exc()
        return False

def check_mixin_integrity():
    """V√©rifier l'int√©grit√© du mixin"""
    
    print("\nüî¨ V√âRIFICATION - Int√©grit√© du Mixin")
    print("-" * 40)
    
    try:
        # V√©rifier que le mixin a toutes les m√©thodes attendues
        expected_methods = [
            'initialize_numero_factura',
            'validate_factura_form',
            'validate_stock_availability',
            'show_stock_impact_summary',
            'guardar_factura',
            'update_stock_after_save',
            'eliminar_factura'
        ]
        
        missing_methods = []
        for method_name in expected_methods:
            if not hasattr(FacturasMethodsMixin, method_name):
                missing_methods.append(method_name)
            else:
                print(f"   ‚úÖ {method_name}")
        
        if missing_methods:
            print(f"   ‚ùå M√©thodes manquantes: {missing_methods}")
            return False
        else:
            print("   ‚úÖ Toutes les m√©thodes attendues sont pr√©sentes")
            return True
    
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ DIAGNOSTIC COMPLET - H√©ritage FacturasWindow")
    print("=" * 60)
    
    # Test 1: Diagnostic de l'h√©ritage
    debug_inheritance()
    
    # Test 2: Test de r√©solution de m√©thodes
    success1 = demo_method_resolution()
    
    # Test 3: V√©rification de l'int√©grit√© du mixin
    success2 = check_mixin_integrity()
    
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DU DIAGNOSTIC:")
    print(f"   Test r√©solution m√©thodes: {'‚úÖ √âXITO' if success1 else '‚ùå FALLO'}")
    print(f"   Int√©grit√© du mixin: {'‚úÖ √âXITO' if success2 else '‚ùå FALLO'}")
    
    if success1 and success2:
        print("\n‚úÖ L'h√©ritage semble correct")
        print("Le probl√®me pourrait √™tre ailleurs:")
        print("   ‚Ä¢ Dans l'ex√©cution du code")
        print("   ‚Ä¢ Dans la base de donn√©es")
        print("   ‚Ä¢ Dans les donn√©es de test")
    else:
        print("\n‚ùå Probl√®mes d√©tect√©s dans l'h√©ritage")
        print("V√©rifier la structure des classes et l'ordre d'h√©ritage")
    
    print("\nüìö Prochaines √©tapes recommand√©es:")
    print("   1. Ex√©cuter le test en temps r√©el")
    print("   2. V√©rifier les logs pendant l'utilisation")
    print("   3. Tester avec des donn√©es r√©elles")
    print("   4. V√©rifier la base de donn√©es directement")
