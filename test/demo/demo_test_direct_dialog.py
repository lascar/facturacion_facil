#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test del di√°logo directo con botones CONFIRMAR/CANCELAR
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

import customtkinter as ctk

def create_direct_stock_dialog(parent, title, message):
    """Crea el di√°logo directo con botones CONFIRMAR/CANCELAR"""
    try:
        # Crear di√°logo personalizado directamente
        dialog = ctk.CTkToplevel(parent)
        dialog.title(title)
        dialog.geometry("600x400")
        dialog.transient(parent)
        dialog.grab_set()
        
        # Variable para el resultado
        result = None
        
        # Frame principal
        main_frame = ctk.CTkFrame(dialog)
        main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # T√≠tulo con icono
        title_frame = ctk.CTkFrame(main_frame)
        title_frame.pack(fill="x", pady=(0, 15))
        
        title_label = ctk.CTkLabel(
            title_frame,
            text=f"üì¶ {title}",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        title_label.pack(pady=10)
        
        # √Årea de texto
        text_widget = ctk.CTkTextbox(
            main_frame,
            height=200,
            font=ctk.CTkFont(size=11, family="Consolas")
        )
        text_widget.pack(fill="both", expand=True, pady=(0, 15))
        text_widget.insert("1.0", message)
        text_widget.configure(state="disabled")
        
        # Frame de botones
        buttons_frame = ctk.CTkFrame(main_frame)
        buttons_frame.pack(fill="x")
        
        def confirmar_clicked():
            nonlocal result
            result = True
            dialog.destroy()
        
        def cancelar_clicked():
            nonlocal result
            result = False
            dialog.destroy()
        
        def copiar_clicked():
            try:
                dialog.clipboard_clear()
                dialog.clipboard_append(message)
                dialog.update()
                print("üìã Mensaje copiado al portapapeles")
            except Exception as e:
                print(f"Error copiando: {e}")
        
        # Bot√≥n Copiar (izquierda)
        copiar_btn = ctk.CTkButton(
            buttons_frame,
            text="üìã Copiar",
            command=copiar_clicked,
            width=100,
            height=35,
            fg_color="gray",
            hover_color="darkgray"
        )
        copiar_btn.pack(side="left", padx=15, pady=15)
        
        # Bot√≥n CANCELAR (derecha)
        cancelar_btn = ctk.CTkButton(
            buttons_frame,
            text="‚ùå CANCELAR",
            command=cancelar_clicked,
            width=140,
            height=40,
            fg_color="#DC143C",
            hover_color="#B22222",
            font=ctk.CTkFont(size=13, weight="bold")
        )
        cancelar_btn.pack(side="right", padx=(5, 15), pady=15)
        
        # Bot√≥n CONFIRMAR (derecha)
        confirmar_btn = ctk.CTkButton(
            buttons_frame,
            text="‚úÖ CONFIRMAR",
            command=confirmar_clicked,
            width=140,
            height=40,
            fg_color="#2E8B57",
            hover_color="#228B22",
            font=ctk.CTkFont(size=13, weight="bold")
        )
        confirmar_btn.pack(side="right", padx=5, pady=15)
        
        # Focus en CONFIRMAR
        confirmar_btn.focus()
        
        # Bind teclas
        dialog.bind("<Return>", lambda e: confirmar_clicked())
        dialog.bind("<Escape>", lambda e: cancelar_clicked())
        
        # Centrar el di√°logo
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (600 // 2)
        y = (dialog.winfo_screenheight() // 2) - (400 // 2)
        dialog.geometry(f"600x400+{x}+{y}")
        
        # Esperar resultado
        dialog.wait_window()
        
        return result
        
    except Exception as e:
        print(f"Error creando di√°logo directo: {e}")
        return None

def test_direct_dialog():
    """Test del di√°logo directo"""
    
    print("üß™ TEST - Di√°logo Directo con Botones CONFIRMAR/CANCELAR")
    print("=" * 70)
    
    try:
        # Crear aplicaci√≥n de test
        app = ctk.CTk()
        app.title("Test Di√°logo Directo")
        app.geometry("500x300")
        
        # Mensaje de test
        test_message = """üì¶ IMPACTO EN STOCK:

‚Ä¢ nuevo prod 270925 1:
  Stock actual: 2 ‚Üí Despu√©s: 1 unidades
  Estado: üü† STOCK BAJO (1)


==================================================
üîÑ ACCI√ìN A REALIZAR:
‚Ä¢ Se guardar√° la factura
‚Ä¢ Se actualizar√° autom√°ticamente el stock
‚Ä¢ Se registrar√°n los movimientos de stock

¬øDesea continuar y procesar la factura?"""
        
        # Label de informaci√≥n
        info_label = ctk.CTkLabel(
            app,
            text="TEST DEL DI√ÅLOGO DIRECTO\n\n"
                 "Este di√°logo debe mostrar:\n"
                 "‚úÖ CONFIRMAR (verde)\n"
                 "‚ùå CANCELAR (rojo)\n"
                 "üìã Copiar (gris)\n\n"
                 "Haz clic para probar:",
            font=ctk.CTkFont(size=12),
            justify="center"
        )
        info_label.pack(expand=True, fill="both", padx=20, pady=20)
        
        # Variable para resultado
        dialog_result = None
        
        def show_dialog():
            nonlocal dialog_result
            print("\nüîÑ Mostrando di√°logo directo...")
            
            result = create_direct_stock_dialog(
                app,
                "Confirmar Procesamiento de Factura",
                test_message
            )
            
            dialog_result = result
            print(f"üìä Resultado: {result}")
            
            if result is True:
                print("‚úÖ Usuario hizo clic en CONFIRMAR")
                result_label.configure(
                    text="‚úÖ CONFIRMADO\nLa factura se procesar√≠a",
                    text_color="green"
                )
            elif result is False:
                print("‚ùå Usuario hizo clic en CANCELAR")
                result_label.configure(
                    text="‚ùå CANCELADO\nLa operaci√≥n fue cancelada",
                    text_color="red"
                )
            else:
                print("‚ö†Ô∏è Di√°logo cerrado sin selecci√≥n")
                result_label.configure(
                    text="‚ö†Ô∏è Sin selecci√≥n",
                    text_color="orange"
                )
        
        # Bot√≥n de test
        test_btn = ctk.CTkButton(
            app,
            text="üîç Mostrar Di√°logo Directo",
            command=show_dialog,
            fg_color="#2E8B57",
            hover_color="#228B22",
            height=45,
            font=ctk.CTkFont(size=14, weight="bold")
        )
        test_btn.pack(pady=15)
        
        # Label de resultado
        result_label = ctk.CTkLabel(
            app,
            text="Resultado aparecer√° aqu√≠",
            font=ctk.CTkFont(size=12)
        )
        result_label.pack(pady=10)
        
        print("\nüöÄ Aplicaci√≥n iniciada")
        print("üí° Haz clic en el bot√≥n para ver el di√°logo con botones CONFIRMAR/CANCELAR")
        
        # Ejecutar aplicaci√≥n
        app.mainloop()
        
        return dialog_result
        
    except Exception as e:
        print(f"‚ùå Error en test: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    print("üöÄ INICIANDO TEST DE DI√ÅLOGO DIRECTO")
    print("=" * 70)
    
    result = test_direct_dialog()
    
    print("\n" + "=" * 70)
    print("üìä RESUMEN:")
    
    if result is True:
        print("   ‚úÖ CONFIRMADO - El di√°logo funciona correctamente")
    elif result is False:
        print("   ‚ùå CANCELADO - El di√°logo funciona correctamente")
    else:
        print("   ‚ö†Ô∏è SIN RESULTADO - Verificar implementaci√≥n")
    
    print("\nüéØ CARACTER√çSTICAS DEL DI√ÅLOGO:")
    print("   ‚Ä¢ Bot√≥n '‚úÖ CONFIRMAR' en verde")
    print("   ‚Ä¢ Bot√≥n '‚ùå CANCELAR' en rojo")
    print("   ‚Ä¢ Bot√≥n 'üìã Copiar' en gris")
    print("   ‚Ä¢ Texto seleccionable")
    print("   ‚Ä¢ Atajos: Enter=Confirmar, Escape=Cancelar")
    
    print("\nüìã PARA USAR EN LA APLICACI√ìN:")
    print("   1. Reiniciar la aplicaci√≥n")
    print("   2. Crear factura con producto de stock bajo")
    print("   3. Hacer clic en 'Guardar'")
    print("   4. Debe aparecer el di√°logo con botones CONFIRMAR/CANCELAR")
    print("   5. Hacer clic en '‚úÖ CONFIRMAR' para procesar la factura")
