#!/usr/bin/env python3
"""
D√©monstration des mini images dans les lignes de factures
"""
import sys
import os
import tempfile
from PIL import Image

# Ajouter le r√©pertoire racine du projet au PYTHONPATH
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.insert(0, project_root)

def demo_mini_images_facturas():
    """D√©monstration compl√®te des mini images dans les factures"""
    
    print("üé® === D√âMONSTRATION MINI IMAGES DANS FACTURES ===\n")
    
    try:
        from utils.image_utils import ImageUtils
        from database.models import Producto, FacturaItem, Factura
        from datetime import datetime
        import time
        
        print("üìã Cette d√©monstration montre comment:")
        print("   1. Les produits affichent leurs images dans les lignes de facture")
        print("   2. Les images sont automatiquement redimensionn√©es en mini format")
        print("   3. Un placeholder est affich√© pour les produits sans image")
        print("   4. Le cache d'images optimise les performances\n")
        
        # √âtape 1: Cr√©er des images de test
        print("1Ô∏è‚É£ Cr√©ation d'images de test")
        
        temp_dir = tempfile.mkdtemp(prefix="demo_images_")
        print(f"   üìÅ R√©pertoire temporaire: {temp_dir}")
        
        # Cr√©er diff√©rentes images de produits
        images_created = []
        
        # Image 1: Produit √©lectronique (bleu)
        img1_path = os.path.join(temp_dir, "producto_electronico.png")
        img1 = Image.new('RGB', (120, 80), color='blue')
        img1.save(img1_path)
        images_created.append(("Producto Electr√≥nico", img1_path))
        
        # Image 2: Produit alimentaire (vert)
        img2_path = os.path.join(temp_dir, "producto_alimentario.png")
        img2 = Image.new('RGB', (80, 120), color='green')
        img2.save(img2_path)
        images_created.append(("Producto Alimentario", img2_path))
        
        # Image 3: Produit textile (rouge)
        img3_path = os.path.join(temp_dir, "producto_textil.png")
        img3 = Image.new('RGB', (100, 100), color='red')
        img3.save(img3_path)
        images_created.append(("Producto Textil", img3_path))
        
        print(f"   ‚úÖ {len(images_created)} images de test cr√©√©es")
        
        # √âtape 2: Cr√©er des produits avec et sans images
        print("\n2Ô∏è‚É£ Cr√©ation de produits de d√©monstration")
        
        productos = []
        
        # Produits avec images
        for i, (nombre, imagen_path) in enumerate(images_created, 1):
            unique_ref = f"DEMO-IMG-{int(time.time())}-{i}"
            producto = Producto(
                nombre=nombre,
                referencia=unique_ref,
                precio=50.00 + (i * 10),
                iva_recomendado=21.0,
                imagen_path=imagen_path,
                categoria="Demo con Imagen",
                descripcion=f"Producto de demostraci√≥n {i} con imagen"
            )
            producto.save()
            productos.append(producto)
            print(f"   ‚úÖ {nombre} creado con imagen")
        
        # Produit sans image
        unique_ref = f"DEMO-NO-IMG-{int(time.time())}"
        producto_sin_imagen = Producto(
            nombre="Producto Sin Imagen",
            referencia=unique_ref,
            precio=25.00,
            iva_recomendado=21.0,
            imagen_path="",  # Pas d'image
            categoria="Demo sin Imagen",
            descripcion="Producto de demostraci√≥n sin imagen"
        )
        producto_sin_imagen.save()
        productos.append(producto_sin_imagen)
        print("   ‚úÖ Producto Sin Imagen creado")
        
        # √âtape 3: Test des utilitaires d'image
        print("\n3Ô∏è‚É£ Test des utilitaires d'image")
        
        # Test de cr√©ation de mini images
        for producto in productos[:3]:  # Seulement ceux avec images
            print(f"   üîÑ Test mini image pour: {producto.nombre}")
            
            mini_image = ImageUtils.create_mini_image(
                producto.imagen_path,
                ImageUtils.get_mini_image_size()
            )
            
            if mini_image:
                print(f"      ‚úÖ Mini image cr√©√©e (taille: {ImageUtils.get_mini_image_size()})")
            else:
                print(f"      ‚ùå Erreur cr√©ation mini image")
        
        # Test placeholder
        print("   üîÑ Test image placeholder")
        placeholder = ImageUtils.create_placeholder_image(ImageUtils.get_mini_image_size())
        if placeholder:
            print("      ‚úÖ Image placeholder cr√©√©e")
        else:
            print("      ‚ùå Erreur cr√©ation placeholder")
        
        # √âtape 4: Cr√©er une facture de d√©monstration
        print("\n4Ô∏è‚É£ Cr√©ation d'une facture de d√©monstration")
        
        unique_factura = f"DEMO-MINI-IMG-{int(time.time())}"
        factura = Factura(
            numero_factura=unique_factura,
            fecha_factura=datetime.now().date(),
            nombre_cliente="Cliente Demo Mini Im√°genes",
            dni_nie_cliente="12345678Z",
            direccion_cliente="Calle Demo 123, Madrid",
            email_cliente="demo@miniimg.com",
            telefono_cliente="+34 123 456 789",
            subtotal=0,  # Se calcular√°
            total_iva=0,  # Se calcular√°
            total_factura=0,  # Se calcular√°
            modo_pago="tarjeta"
        )
        factura.save()
        print(f"   ‚úÖ Factura creada: {unique_factura}")
        
        # √âtape 5: Ajouter items √† la facture
        print("\n5Ô∏è‚É£ Ajout d'items avec images √† la facture")
        
        factura_items = []
        total_subtotal = 0
        total_iva = 0
        
        for i, producto in enumerate(productos, 1):
            item = FacturaItem(
                factura_id=factura.id,
                producto_id=producto.id,
                cantidad=i,  # Quantit√©s diff√©rentes
                precio_unitario=producto.precio,
                iva_aplicado=21.0,
                descuento=0 if i % 2 == 0 else 5  # Alternance avec/sans remise
            )
            item.save()
            factura_items.append(item)
            
            # Calculer totaux
            subtotal_item = item.cantidad * item.precio_unitario * (1 - item.descuento / 100)
            iva_item = subtotal_item * (item.iva_aplicado / 100)
            total_subtotal += subtotal_item
            total_iva += iva_item
            
            status_img = "üñºÔ∏è" if producto.imagen_path else "üì∑"
            print(f"   {status_img} {producto.nombre} - Qty: {item.cantidad} - ‚Ç¨{producto.precio}")
        
        # Mettre √† jour les totaux de la facture
        factura.subtotal = total_subtotal
        factura.total_iva = total_iva
        factura.total_factura = total_subtotal + total_iva
        factura.save()
        
        print(f"   ‚úÖ {len(factura_items)} items ajout√©s √† la facture")
        
        # √âtape 6: Simulation de l'affichage dans l'interface
        print("\n6Ô∏è‚É£ Simulation de l'affichage dans l'interface")
        
        print("   üìã Aper√ßu de la facture avec mini images:")
        print("   " + "="*70)
        print("   | Img | Producto                    | Qty | Precio | Total    |")
        print("   " + "="*70)
        
        for item in factura_items:
            producto = next(p for p in productos if p.id == item.producto_id)
            img_icon = "üñºÔ∏è " if producto.imagen_path else "üì∑ "
            total_item = item.cantidad * item.precio_unitario * (1 - item.descuento / 100)
            total_item += total_item * (item.iva_aplicado / 100)
            
            print(f"   | {img_icon} | {producto.nombre[:25]:<25} | {item.cantidad:3} | ‚Ç¨{item.precio_unitario:5.2f} | ‚Ç¨{total_item:6.2f} |")
        
        print("   " + "="*70)
        print(f"   | Total Factura: ‚Ç¨{factura.total_factura:.2f}")
        print("   " + "="*70)
        
        # √âtape 7: Test du cache d'images
        print("\n7Ô∏è‚É£ Test du cache d'images")
        
        image_utils = ImageUtils()
        
        # Premier chargement
        start_time = time.time()
        for producto in productos[:3]:
            if producto.imagen_path:
                image_utils.get_cached_mini_image(producto.imagen_path)
        first_load_time = time.time() - start_time
        
        # Deuxi√®me chargement (depuis le cache)
        start_time = time.time()
        for producto in productos[:3]:
            if producto.imagen_path:
                image_utils.get_cached_mini_image(producto.imagen_path)
        cached_load_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è  Premier chargement: {first_load_time:.4f}s")
        print(f"   ‚ö° Chargement depuis cache: {cached_load_time:.4f}s")
        print(f"   üöÄ Am√©lioration: {(first_load_time/cached_load_time):.1f}x plus rapide")
        
        # √âtape 8: Avantages de la fonctionnalit√©
        print("\n8Ô∏è‚É£ Avantages des mini images dans les factures")
        print("   ‚úÖ **Identification visuelle** : Reconnaissance rapide des produits")
        print("   ‚úÖ **Interface moderne** : Aspect professionnel et attrayant")
        print("   ‚úÖ **R√©duction d'erreurs** : Moins de confusion entre produits")
        print("   ‚úÖ **Performance optimis√©e** : Cache intelligent des images")
        print("   ‚úÖ **Compatibilit√©** : Support de tous formats d'image")
        print("   ‚úÖ **Fallback √©l√©gant** : Placeholder pour produits sans image")
        
        # Nettoyage
        print("\nüßπ Nettoyage...")
        try:
            for _, image_path in images_created:
                if os.path.exists(image_path):
                    os.remove(image_path)
            if os.path.exists(temp_dir):
                os.rmdir(temp_dir)
            print("   ‚úÖ Images temporaires supprim√©es")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Erreur lors du nettoyage: {e}")
        
        print(f"\nüéâ === D√âMONSTRATION TERMIN√âE ===")
        print("üí° Les mini images sont maintenant int√©gr√©es dans l'interface de facturation!")
        print("üéØ Avantages: Identification visuelle, interface moderne, performance optimis√©e")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = demo_mini_images_facturas()
    sys.exit(0 if success else 1)
