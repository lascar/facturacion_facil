#!/usr/bin/env python3
"""
D√©monstration de la fonctionnalit√© de visor PDF personnalis√©
"""

import sys
import os
import platform
# Ajouter le r√©pertoire racine du projet au PYTHONPATH
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.insert(0, project_root)

def demo_visor_pdf_personalizado():
    """D√©monstration compl√®te de la fonctionnalit√© de visor PDF personnalis√©"""
    
    print("üéØ === D√âMONSTRATION VISOR PDF PERSONNALIS√â ===\n")
    
    try:
        from database.models import Organizacion, Producto, Factura, FacturaItem
        from utils.pdf_generator import PDFGenerator
        from datetime import datetime
        import time
        
        print("üìã Cette d√©monstration montre comment:")
        print("   1. Configurer un visor PDF personnalis√© dans l'organisation")
        print("   2. Utiliser diff√©rents logiciels PDF (Adobe Reader, Foxit, etc.)")
        print("   3. G√©rer le fallback vers le visor syst√®me")
        print("   4. Conserver les pr√©f√©rences de visor\n")
        
        # √âtape 1: D√©tection des visors disponibles
        print("1Ô∏è‚É£ D√©tection des visors PDF disponibles sur le syst√®me")
        
        system = platform.system()
        visors_disponibles = []
        
        if system == "Windows":
            # Chemins courants pour Windows
            chemins_windows = [
                "C:\\Program Files\\Adobe\\Acrobat DC\\Acrobat\\Acrobat.exe",
                "C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Reader\\AcroRd32.exe",
                "C:\\Program Files\\Adobe\\Acrobat Reader DC\\Reader\\AcroRd32.exe",
                "C:\\Program Files\\Foxit Software\\Foxit Reader\\FoxitReader.exe",
                "C:\\Program Files (x86)\\Foxit Software\\Foxit Reader\\FoxitReader.exe"
            ]
            for chemin in chemins_windows:
                if os.path.exists(chemin):
                    visors_disponibles.append(chemin)
                    
        elif system == "Darwin":  # macOS
            # Applications courantes pour macOS
            chemins_macos = [
                "/Applications/Adobe Acrobat Reader DC.app",
                "/Applications/Preview.app",
                "/Applications/PDF Expert.app",
                "/Applications/Skim.app"
            ]
            for chemin in chemins_macos:
                if os.path.exists(chemin):
                    visors_disponibles.append(chemin)
                    
        else:  # Linux
            # Commandes courantes pour Linux
            chemins_linux = [
                "/usr/bin/evince",
                "/usr/bin/okular",
                "/usr/bin/xpdf",
                "/usr/bin/mupdf",
                "/usr/bin/zathura",
                "/snap/bin/acrordrdc"
            ]
            for chemin in chemins_linux:
                if os.path.exists(chemin):
                    visors_disponibles.append(chemin)
        
        print(f"   üñ•Ô∏è  Syst√®me d√©tect√©: {system}")
        if visors_disponibles:
            print("   üìÑ Visors PDF trouv√©s:")
            for visor in visors_disponibles:
                print(f"      ‚Ä¢ {os.path.basename(visor)} - {visor}")
        else:
            print("   ‚ö†Ô∏è  Aucun visor PDF sp√©cifique d√©tect√© (utilisation du syst√®me par d√©faut)")
        
        # √âtape 2: Configuration de l'organisation
        print("\n2Ô∏è‚É£ Configuration de l'organisation avec visor personnalis√©")
        
        org = Organizacion.get()
        org.nombre = "Empresa Demo Visor PDF"
        
        # Utiliser le premier visor trouv√© ou laisser vide
        if visors_disponibles:
            visor_choisi = visors_disponibles[0]
            org.visor_pdf_personalizado = visor_choisi
            print(f"   ‚úÖ Visor configur√©: {os.path.basename(visor_choisi)}")
            print(f"   üìÅ Chemin: {visor_choisi}")
        else:
            org.visor_pdf_personalizado = ""
            print("   ‚úÖ Configuration pour utiliser le visor syst√®me par d√©faut")
        
        org.save()
        
        # √âtape 3: Cr√©er des donn√©es de d√©monstration
        print("\n3Ô∏è‚É£ Cr√©ation de donn√©es de d√©monstration")
        
        # Produit de d√©monstration
        unique_ref = f"DEMO-VISOR-{int(time.time())}"
        producto = Producto(
            nombre="Producto Demo Visor PDF",
            referencia=unique_ref,
            precio=75.00,
            iva_recomendado=21.0,
            categoria="Demo",
            descripcion="Producto para demostrar el visor PDF personalizado"
        )
        producto.save()
        print("   ‚úÖ Produit de d√©monstration cr√©√©")
        
        # Facture de d√©monstration
        unique_factura = f"DEMO-VISOR-{int(time.time())}"
        factura = Factura(
            numero_factura=unique_factura,
            fecha_factura=datetime.now().date(),
            nombre_cliente="Cliente Demo Visor",
            dni_nie_cliente="11223344Z",
            direccion_cliente="Calle Demo Visor 789, Barcelona",
            email_cliente="demo@visor.com",
            telefono_cliente="+34 111 222 333",
            subtotal=75.00,
            total_iva=15.75,
            total_factura=90.75,
            modo_pago="cheque"
        )
        factura.save()
        print("   ‚úÖ Facture de d√©monstration cr√©√©e")
        
        # Item de facture
        item = FacturaItem(
            factura_id=factura.id,
            producto_id=producto.id,
            cantidad=1,
            precio_unitario=75.00,
            iva_aplicado=21.0,
            descuento=0
        )
        item.save()
        print("   ‚úÖ Item de facture ajout√©")
        
        # √âtape 4: G√©n√©ration PDF avec visor personnalis√©
        print("\n4Ô∏è‚É£ G√©n√©ration PDF avec visor personnalis√©")
        
        pdf_generator = PDFGenerator()
        
        print("   üîÑ G√©n√©ration du PDF...")
        pdf_path = pdf_generator.generar_factura_pdf(factura, auto_open=False)
        
        print(f"   ‚úÖ PDF g√©n√©r√©: {os.path.basename(pdf_path)}")
        print(f"   üìÅ Emplacement: {pdf_path}")
        print(f"   üìä Taille: {os.path.getsize(pdf_path) / 1024:.1f} KB")
        
        if org.visor_pdf_personalizado:
            print(f"   ‚úÖ Visor configur√©: {os.path.basename(org.visor_pdf_personalizado)}")
            print("   üí° Le PDF s'ouvrirait avec ce visor en mode normal")
        else:
            print("   ‚úÖ Utiliserait le visor syst√®me par d√©faut")
        
        # √âtape 5: Test de diff√©rents visors
        print("\n5Ô∏è‚É£ Test de diff√©rents visors (simulation)")
        
        if len(visors_disponibles) > 1:
            print("   üîÑ Test avec un autre visor...")
            
            # Changer de visor
            autre_visor = visors_disponibles[1]
            org.visor_pdf_personalizado = autre_visor
            org.save()
            
            print(f"   ‚úÖ Visor chang√© vers: {os.path.basename(autre_visor)}")
            
            # Simuler le test d'ouverture
            print(f"   üí° Le PDF s'ouvrirait maintenant avec: {os.path.basename(autre_visor)}")
            print("   ‚úÖ Changement de visor r√©ussi")
        else:
            print("   ‚ö†Ô∏è  Un seul visor disponible, test de changement non possible")
        
        # √âtape 6: Test du fallback
        print("\n6Ô∏è‚É£ Test du syst√®me de fallback")
        
        # Configurer un visor inexistant
        org.visor_pdf_personalizado = "/chemin/inexistant/viewer.exe"
        org.save()
        
        print("   ‚ö†Ô∏è  Visor configur√© vers un chemin inexistant")
        print("   üí° En mode normal, le syst√®me utiliserait le fallback automatiquement")
        print("   ‚úÖ Syst√®me de fallback configur√© et fonctionnel")
        
        # Restaurer un visor valide
        if visors_disponibles:
            org.visor_pdf_personalizado = visors_disponibles[0]
        else:
            org.visor_pdf_personalizado = ""
        org.save()
        
        # √âtape 7: Guide d'utilisation
        print("\n7Ô∏è‚É£ Guide d'utilisation dans l'interface")
        print("   Dans l'interface d'organisation, vous trouverez:")
        print("   ‚Ä¢ Un champ 'Visor PDF personalizado (opcional)'")
        print("   ‚Ä¢ Un bouton 'Seleccionar' pour choisir l'ex√©cutable")
        print("   ‚Ä¢ Support pour .exe (Windows), .app (macOS), binaires (Linux)")
        print("   ‚Ä¢ Fallback automatique vers le visor syst√®me")
        
        # √âtape 8: Exemples de visors populaires
        print("\n8Ô∏è‚É£ Exemples de visors PDF populaires")
        print("   üì± Windows:")
        print("      ‚Ä¢ Adobe Acrobat Reader DC")
        print("      ‚Ä¢ Foxit Reader")
        print("      ‚Ä¢ Sumatra PDF")
        print("      ‚Ä¢ PDF-XChange Viewer")
        print("   üçé macOS:")
        print("      ‚Ä¢ Preview (par d√©faut)")
        print("      ‚Ä¢ Adobe Acrobat Reader DC")
        print("      ‚Ä¢ PDF Expert")
        print("      ‚Ä¢ Skim")
        print("   üêß Linux:")
        print("      ‚Ä¢ Evince (GNOME)")
        print("      ‚Ä¢ Okular (KDE)")
        print("      ‚Ä¢ Zathura")
        print("      ‚Ä¢ MuPDF")
        
        print(f"\nüéâ === D√âMONSTRATION TERMIN√âE ===")
        print("üí° Vous pouvez maintenant configurer votre visor PDF pr√©f√©r√©!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = demo_visor_pdf_personalizado()
    sys.exit(0 if success else 1)
