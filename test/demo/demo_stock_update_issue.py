#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
D√©monstration et diagnostic du probl√®me:
"Les stocks ne s'actualisent pas si l'on facture un produit"
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from database.database import db
from database.models import Producto, Stock, Factura, FacturaItem
from utils.logger import get_logger

def demo_stock_update_issue():
    """D√©monstration du probl√®me de mise √† jour du stock"""
    
    print("üîç DIAGNOSTIC - Probl√®me de mise √† jour du stock")
    print("=" * 60)
    print("Probl√®me: Les stocks ne s'actualisent pas lors de la facturation")
    print()
    
    # Initialiser la base de donn√©es
    db.initialize()
    logger = get_logger("demo_stock_issue")
    
    try:
        print("1Ô∏è‚É£ Cr√©ation d'un produit de test avec stock initial...")
        
        # Cr√©er un produit de test
        producto_test = Producto(
            nombre="Producto Test Stock Update",
            referencia=f"TEST-STOCK-UPDATE-001",
            precio=15.99,
            categoria="Test",
            iva_recomendado=21.0,
            descripcion="Producto para probar la actualizaci√≥n de stock en facturas"
        )
        
        producto_test.save()
        print(f"   üì¶ Producto creado: {producto_test.nombre} (ID: {producto_test.id})")
        
        # Establecer stock inicial
        stock_inicial = 100
        stock_obj = Stock(producto_test.id, stock_inicial)
        stock_obj.save()
        
        stock_verificado = Stock.get_by_product(producto_test.id)
        print(f"   üìä Stock inicial establecido: {stock_verificado} unidades")
        
        print("\n2Ô∏è‚É£ Simulaci√≥n de creaci√≥n de factura...")
        
        # Crear una factura de test
        factura_test = Factura(
            numero_factura="TEST-001",
            nombre_cliente="Cliente Test",
            fecha_factura="2024-09-27"
        )
        
        # Crear item de factura
        cantidad_vendida = 25
        item_test = FacturaItem(
            producto_id=producto_test.id,
            cantidad=cantidad_vendida,
            precio_unitario=producto_test.precio,
            iva_aplicado=21.0
        )
        
        # Calcular totales del item
        item_test.calculate_totals()
        
        # Asignar items a la factura
        factura_test.items = [item_test]
        factura_test.calculate_totals()
        
        print(f"   üßæ Factura creada: {factura_test.numero_factura}")
        print(f"   üì¶ Producto: {producto_test.nombre}")
        print(f"   üìä Cantidad vendida: {cantidad_vendida}")
        print(f"   üí∞ Total factura: ‚Ç¨{factura_test.total_factura:.2f}")
        
        print("\n3Ô∏è‚É£ Guardando factura (sin actualizaci√≥n autom√°tica de stock)...")
        
        # Guardar la factura (esto NO actualiza el stock autom√°ticamente)
        factura_test.save()
        print(f"   ‚úÖ Factura guardada con ID: {factura_test.id}")
        
        # Verificar stock despu√©s de guardar factura
        stock_despues_factura = Stock.get_by_product(producto_test.id)
        print(f"   üìä Stock despu√©s de guardar factura: {stock_despues_factura} unidades")
        
        if stock_despues_factura == stock_inicial:
            print("   ‚ùå PROBLEMA CONFIRMADO: El stock NO se actualiz√≥ autom√°ticamente")
        else:
            print("   ‚úÖ Stock actualizado correctamente")
        
        print("\n4Ô∏è‚É£ Simulaci√≥n de la actualizaci√≥n manual de stock...")
        
        # Simular lo que deber√≠a hacer update_stock_after_save()
        print("   üîß Ejecutando Stock.update_stock() manualmente...")
        
        for item in factura_test.items:
            print(f"      - Actualizando stock para producto ID {item.producto_id}")
            print(f"      - Cantidad a descontar: {item.cantidad}")
            
            stock_antes = Stock.get_by_product(item.producto_id)
            print(f"      - Stock antes: {stock_antes}")
            
            # Actualizar stock
            Stock.update_stock(item.producto_id, item.cantidad)
            
            stock_despues = Stock.get_by_product(item.producto_id)
            print(f"      - Stock despu√©s: {stock_despues}")
            
            if stock_despues == stock_antes - item.cantidad:
                print("      ‚úÖ Stock actualizado correctamente")
            else:
                print("      ‚ùå Error en actualizaci√≥n de stock")
        
        print("\n5Ô∏è‚É£ Verificaci√≥n final...")
        
        stock_final = Stock.get_by_product(producto_test.id)
        stock_esperado = stock_inicial - cantidad_vendida
        
        print(f"   üìä Stock inicial: {stock_inicial}")
        print(f"   üìä Cantidad vendida: {cantidad_vendida}")
        print(f"   üìä Stock esperado: {stock_esperado}")
        print(f"   üìä Stock actual: {stock_final}")
        
        if stock_final == stock_esperado:
            print("   ‚úÖ Stock final correcto")
        else:
            print("   ‚ùå Stock final incorrecto")
        
        print("\n6Ô∏è‚É£ An√°lisis del problema...")
        
        print("   üîç Posibles causas del problema:")
        print("      1. La m√©thode update_stock_after_save() no se ejecuta")
        print("      2. Error en la herencia del mixin FacturasMethodsMixin")
        print("      3. Excepci√≥n silenciosa en update_stock_after_save()")
        print("      4. Problema en el flujo de guardar_factura()")
        
        print("\n7Ô∏è‚É£ Verificaci√≥n de m√©todos...")
        
        # Verificar si los m√©todos existen
        from ui.facturas import FacturasWindow
        from ui.facturas_methods import FacturasMethodsMixin
        
        print("   üîç Verificando herencia de m√©todos:")
        
        methods_to_check = [
            'guardar_factura',
            'update_stock_after_save',
            'show_stock_impact_summary'
        ]
        
        for method_name in methods_to_check:
            if hasattr(FacturasMethodsMixin, method_name):
                print(f"      ‚úÖ {method_name} existe en FacturasMethodsMixin")
            else:
                print(f"      ‚ùå {method_name} NO existe en FacturasMethodsMixin")
            
            if hasattr(FacturasWindow, method_name):
                print(f"      ‚úÖ {method_name} disponible en FacturasWindow")
            else:
                print(f"      ‚ùå {method_name} NO disponible en FacturasWindow")
        
        print("\n8Ô∏è‚É£ Limpieza...")
        
        # Limpiar datos de test
        factura_test.delete()
        producto_test.delete()
        print("   üóëÔ∏è Datos de test eliminados")
        
        print("\n" + "=" * 60)
        print("üìã RESUMEN DEL DIAGN√ìSTICO")
        print("=" * 60)
        print()
        print("üîç Problema identificado:")
        print("   ‚Ä¢ El stock NO se actualiza autom√°ticamente al guardar facturas")
        print("   ‚Ä¢ La actualizaci√≥n manual funciona correctamente")
        print("   ‚Ä¢ El problema est√° en el flujo autom√°tico")
        print()
        print("üéØ Posibles soluciones:")
        print("   1. Verificar que update_stock_after_save() se ejecute")
        print("   2. Agregar logging para diagnosticar el flujo")
        print("   3. Verificar excepciones silenciosas")
        print("   4. Asegurar que la herencia del mixin funcione")
        
        return True
        
    except Exception as e:
        logger.error(f"Error en diagn√≥stico: {e}")
        print(f"\n‚ùå Error durante el diagn√≥stico: {e}")
        return False

def test_stock_update_method():
    """Test espec√≠fico del m√©todo Stock.update_stock"""
    print("\nüß™ TEST ESPEC√çFICO - M√©todo Stock.update_stock")
    print("-" * 50)
    
    try:
        # Crear producto de test
        producto = Producto(
            nombre="Test Update Method",
            referencia="TEST-UPDATE-001",
            precio=10.0
        )
        producto.save()
        
        # Establecer stock inicial
        stock_inicial = 50
        stock_obj = Stock(producto.id, stock_inicial)
        stock_obj.save()
        
        print(f"1. Stock inicial: {Stock.get_by_product(producto.id)}")
        
        # Test de actualizaci√≥n
        cantidad_venta = 15
        Stock.update_stock(producto.id, cantidad_venta)
        
        stock_final = Stock.get_by_product(producto.id)
        print(f"2. Stock despu√©s de venta de {cantidad_venta}: {stock_final}")
        
        # Verificar resultado
        if stock_final == stock_inicial - cantidad_venta:
            print("‚úÖ M√©todo Stock.update_stock() funciona correctamente")
            resultado = True
        else:
            print("‚ùå M√©todo Stock.update_stock() NO funciona")
            resultado = False
        
        # Limpiar
        producto.delete()
        
        return resultado
        
    except Exception as e:
        print(f"‚ùå Error en test de m√©todo: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando diagn√≥stico del problema de actualizaci√≥n de stock...")
    print()
    
    success1 = demo_stock_update_issue()
    success2 = test_stock_update_method()
    
    if success1 and success2:
        print("\nüéØ DIAGN√ìSTICO COMPLETADO")
        print("El problema est√° identificado y las soluciones est√°n claras.")
    else:
        print("\n‚ö†Ô∏è Problemas durante el diagn√≥stico. Revisar los logs.")
    
    print("\nüìö Pr√≥ximos pasos:")
    print("   1. Verificar el flujo de guardar_factura()")
    print("   2. Agregar logging detallado")
    print("   3. Implementar la correcci√≥n")
    print("   4. Crear tests de integraci√≥n")
