#!/usr/bin/env python3
"""
Test de la nouvelle fonctionnalit√© de t√©l√©chargement PDF configurable
"""

import sys
import os
import tempfile
import shutil
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_pdf_download_feature():
    """Test complet de la fonctionnalit√© de t√©l√©chargement PDF"""
    
    print("üß™ === TEST FONCTIONNALIT√â T√âL√âCHARGEMENT PDF ===\n")
    
    try:
        # Importer les modules n√©cessaires
        from database.models import Organizacion, Producto, Factura, FacturaItem
        from utils.pdf_generator import PDFGenerator
        from datetime import datetime
        
        print("‚úÖ Modules import√©s avec succ√®s")
        
        # Test 1: V√©rifier le nouveau champ dans Organizacion
        print("\n1Ô∏è‚É£ Test: Nouveau champ directorio_descargas_pdf")
        
        # Cr√©er une organisation avec le nouveau champ
        org = Organizacion(
            nombre="Test Empresa PDF",
            directorio_descargas_pdf="/tmp/test_pdfs"
        )
        
        # V√©rifier que le champ existe
        assert hasattr(org, 'directorio_descargas_pdf')
        assert org.directorio_descargas_pdf == "/tmp/test_pdfs"
        print("   ‚úÖ Champ directorio_descargas_pdf ajout√© correctement")
        
        # Test 2: Sauvegarder et r√©cup√©rer l'organisation
        print("\n2Ô∏è‚É£ Test: Sauvegarde et r√©cup√©ration avec nouveau champ")
        
        # Cr√©er un r√©pertoire temporaire pour les tests
        temp_dir = tempfile.mkdtemp(prefix="test_pdf_")
        print(f"   üìÅ R√©pertoire temporaire cr√©√©: {temp_dir}")
        
        org.directorio_descargas_pdf = temp_dir
        org.save()
        
        # R√©cup√©rer l'organisation
        org_retrieved = Organizacion.get()
        assert org_retrieved.directorio_descargas_pdf == temp_dir
        print("   ‚úÖ Sauvegarde et r√©cup√©ration fonctionnent correctement")
        
        # Test 3: Cr√©er des donn√©es de test pour la facture
        print("\n3Ô∏è‚É£ Test: Cr√©ation de donn√©es de test")
        
        # Cr√©er un produit de test avec r√©f√©rence unique
        import time
        unique_ref = f"TEST-PDF-{int(time.time())}"
        producto = Producto(
            nombre="Producto Test PDF",
            referencia=unique_ref,
            precio=25.50,
            iva_recomendado=21.0
        )
        producto.save()
        print("   ‚úÖ Produit de test cr√©√©")
        
        # Cr√©er une facture de test avec num√©ro unique
        unique_factura = f"TEST-PDF-{int(time.time())}"
        factura = Factura(
            numero_factura=unique_factura,
            fecha_factura=datetime.now().date(),
            nombre_cliente="Cliente Test PDF",
            dni_nie_cliente="12345678Z",
            direccion_cliente="Calle Test PDF 123",
            email_cliente="test@pdf.com",
            telefono_cliente="+34 123 456 789",
            subtotal=25.50,
            total_iva=5.36,
            total_factura=30.86,
            modo_pago="efectivo"
        )
        factura.save()
        print("   ‚úÖ Facture de test cr√©√©e")
        
        # Cr√©er un item de factura
        item = FacturaItem(
            factura_id=factura.id,
            producto_id=producto.id,
            cantidad=1,
            precio_unitario=25.50,
            iva_aplicado=21.0,
            descuento=0
        )
        item.save()
        print("   ‚úÖ Item de facture cr√©√©")
        
        # Test 4: G√©n√©rer PDF avec r√©pertoire configur√©
        print("\n4Ô∏è‚É£ Test: G√©n√©ration PDF avec r√©pertoire configur√©")
        
        pdf_generator = PDFGenerator()
        
        # G√©n√©rer PDF sans ouverture automatique pour le test
        pdf_path = pdf_generator.generar_factura_pdf(factura, auto_open=False)
        
        # V√©rifier que le PDF a √©t√© cr√©√© dans le bon r√©pertoire
        assert os.path.exists(pdf_path)
        assert temp_dir in pdf_path
        print(f"   ‚úÖ PDF g√©n√©r√© dans le r√©pertoire configur√©: {pdf_path}")
        
        # V√©rifier la taille du fichier
        file_size = os.path.getsize(pdf_path)
        assert file_size > 1000  # Le PDF doit faire au moins 1KB
        print(f"   ‚úÖ Taille du PDF: {file_size / 1024:.1f} KB")
        
        # Test 5: Test avec r√©pertoire par d√©faut (fallback)
        print("\n5Ô∏è‚É£ Test: Fallback vers r√©pertoire par d√©faut")
        
        # Modifier l'organisation pour avoir un r√©pertoire inexistant
        org.directorio_descargas_pdf = "/repertoire/inexistant"
        org.save()
        
        # G√©n√©rer PDF (devrait utiliser le r√©pertoire par d√©faut)
        pdf_path_fallback = pdf_generator.generar_factura_pdf(factura, auto_open=False)
        
        # V√©rifier que le PDF a √©t√© cr√©√©
        assert os.path.exists(pdf_path_fallback)
        print(f"   ‚úÖ PDF g√©n√©r√© avec fallback: {pdf_path_fallback}")
        
        # Test 6: Test de la m√©thode d'ouverture PDF
        print("\n6Ô∏è‚É£ Test: M√©thode d'ouverture PDF")
        
        try:
            # Tester la m√©thode d'ouverture (ne devrait pas lever d'exception)
            pdf_generator.open_pdf_file(pdf_path)
            print("   ‚úÖ M√©thode d'ouverture PDF fonctionne")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Ouverture PDF non disponible sur ce syst√®me: {e}")
        
        # Nettoyage
        print("\nüßπ Nettoyage...")
        try:
            if os.path.exists(temp_dir):
                shutil.rmtree(temp_dir)
            print("   ‚úÖ R√©pertoire temporaire supprim√©")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Erreur lors du nettoyage: {e}")
        
        print("\nüéâ === TOUS LES TESTS R√âUSSIS ===")
        print("\nüìã R√©sum√© des fonctionnalit√©s test√©es:")
        print("   ‚úÖ Nouveau champ directorio_descargas_pdf dans Organizacion")
        print("   ‚úÖ Sauvegarde et r√©cup√©ration du r√©pertoire PDF")
        print("   ‚úÖ G√©n√©ration PDF dans r√©pertoire configur√©")
        print("   ‚úÖ Fallback vers r√©pertoire par d√©faut")
        print("   ‚úÖ Ouverture automatique du PDF")
        print("   ‚úÖ Compatibilit√© avec bases de donn√©es existantes")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'importation: {e}")
        print("   Assurez-vous que tous les modules sont disponibles")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_pdf_download_feature()
    sys.exit(0 if success else 1)
