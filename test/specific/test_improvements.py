#!/usr/bin/env python3
"""
Test des am√©liorations apport√©es √† l'interface des produits
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_config_system():
    """Test du syst√®me de configuration"""
    print("üîß Test du syst√®me de configuration...")
    
    try:
        from utils.config import app_config
        
        # Test des m√©thodes de base
        default_dir = app_config.get_default_image_directory()
        print(f"‚úÖ R√©pertoire par d√©faut: {default_dir}")
        
        assets_dir = app_config.get_assets_directory()
        print(f"‚úÖ R√©pertoire assets: {assets_dir}")
        
        display_size = app_config.get_image_display_size()
        print(f"‚úÖ Taille d'affichage: {display_size}")
        
        formats = app_config.get_supported_formats()
        print(f"‚úÖ Formats support√©s: {formats}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur config: {e}")
        return False

def test_new_methods():
    """Test des nouvelles m√©thodes"""
    print("\nüîß Test des nouvelles m√©thodes...")
    
    try:
        from ui.productos import ProductosWindow
        
        # V√©rifier que les nouvelles m√©thodes existent
        methods_to_check = [
            'update_image_display',
            'quitar_imagen', 
            'configurar_directorio_imagenes'
        ]
        
        for method_name in methods_to_check:
            if hasattr(ProductosWindow, method_name):
                method = getattr(ProductosWindow, method_name)
                if callable(method):
                    print(f"‚úÖ M√©thode {method_name} trouv√©e et callable")
                else:
                    print(f"‚ùå M√©thode {method_name} trouv√©e mais pas callable")
                    return False
            else:
                print(f"‚ùå M√©thode {method_name} non trouv√©e")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur m√©thodes: {e}")
        return False

def test_translations():
    """Test des nouvelles traductions"""
    print("\nüåê Test des nouvelles traductions...")
    
    try:
        from utils.translations import get_text
        
        new_translations = [
            "quitar_imagen",
            "configurar_directorio"
        ]
        
        for key in new_translations:
            value = get_text(key)
            if value and value != key:  # V√©rifier que la traduction existe
                print(f"‚úÖ {key}: '{value}'")
            else:
                print(f"‚ùå Traduction manquante pour: {key}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur traductions: {e}")
        return False

def test_pil_import():
    """Test de l'import PIL"""
    print("\nüñºÔ∏è  Test de l'import PIL...")
    
    try:
        from PIL import Image, ImageTk
        print("‚úÖ PIL import√© avec succ√®s")
        
        # Test de cr√©ation d'une image simple
        img = Image.new('RGB', (100, 100), color='red')
        print("‚úÖ Cr√©ation d'image PIL r√©ussie")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur import PIL: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur PIL: {e}")
        return False

def test_file_operations():
    """Test des op√©rations de fichier am√©lior√©es"""
    print("\nüìÅ Test des op√©rations de fichier...")
    
    try:
        import tempfile
        import os
        from utils.config import app_config
        
        # Test de cr√©ation du r√©pertoire assets
        assets_dir = app_config.get_assets_directory()
        os.makedirs(assets_dir, exist_ok=True)
        print(f"‚úÖ R√©pertoire assets cr√©√©: {assets_dir}")
        
        # Test de cr√©ation d'un fichier temporaire
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
            temp_file.write(b'fake_image_data')
            temp_path = temp_file.name
        
        print(f"‚úÖ Fichier temporaire cr√©√©: {temp_path}")
        
        # Nettoyer
        os.unlink(temp_path)
        print("‚úÖ Nettoyage effectu√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur op√©rations fichier: {e}")
        return False

def main():
    """Fonction principale"""
    print("üß™ Test des am√©liorations de l'interface produits")
    print("=" * 60)
    
    tests = [
        ("Syst√®me de configuration", test_config_system),
        ("Nouvelles m√©thodes", test_new_methods),
        ("Nouvelles traductions", test_translations),
        ("Import PIL", test_pil_import),
        ("Op√©rations de fichier", test_file_operations)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur critique dans {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 60)
    print("üìä R√âSULTATS:")
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if not result:
            all_passed = False
    
    print("\n" + "=" * 60)
    if all_passed:
        print("üéâ TOUTES LES AM√âLIORATIONS SONT FONCTIONNELLES!")
        print("\nüìã Am√©liorations apport√©es:")
        print("   1. ‚úÖ Display d'image avec aper√ßu")
        print("   2. ‚úÖ Configuration du r√©pertoire par d√©faut")
        print("   3. ‚úÖ Bouton 'Nuevo Producto' d√©plac√© dans le formulaire")
        print("   4. ‚úÖ Bouton 'Quitar imagen' ajout√©")
        print("   5. ‚úÖ Bouton de configuration (‚öôÔ∏è) ajout√©")
        print("   6. ‚úÖ Gestion d'erreurs am√©lior√©e")
    else:
        print("‚ö†Ô∏è  CERTAINES AM√âLIORATIONS ONT DES PROBL√àMES!")
        print("V√©rifiez les erreurs ci-dessus.")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
