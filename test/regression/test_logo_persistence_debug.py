#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de diagnostic pour la persistance du logo
"""

import os
import tempfile
import pytest
from PIL import Image
from database.models import Organizacion
from test.utils.test_database_manager import isolated_test_db


class TestLogoPersistenceDebug:
    """Tests de diagnostic pour la persistance du logo"""
    
    @pytest.fixture
    def temp_logo(self):
        """Cr√©e un logo temporaire pour les tests"""
        temp_dir = tempfile.mkdtemp()
        logo_path = os.path.join(temp_dir, "test_logo.png")
        
        # Cr√©er une image de test
        img = Image.new('RGB', (100, 50), color='red')
        img.save(logo_path)
        
        yield logo_path
        
        # Nettoyage
        if os.path.exists(logo_path):
            os.remove(logo_path)
        os.rmdir(temp_dir)
    
    def test_logo_persistence_step_by_step(self, temp_logo):
        """Test d√©taill√© de la persistance du logo √©tape par √©tape"""
        with isolated_test_db("test_logo_persistence_debug") as db:
            from database import database
            original_db = database.db
            
            try:
                database.db = db
                
                print(f"\nüîç Test de persistance du logo - Diagnostic d√©taill√©")
                print(f"=" * 60)
                
                # √âtape 1: V√©rifier que le logo temporaire existe
                print(f"\n1Ô∏è‚É£ V√©rification du logo temporaire")
                print(f"   üìÅ Chemin: {temp_logo}")
                print(f"   ‚úÖ Existe: {os.path.exists(temp_logo)}")
                assert os.path.exists(temp_logo), "Le logo temporaire n'existe pas"
                
                # √âtape 2: Cr√©er organisation avec logo
                print(f"\n2Ô∏è‚É£ Cr√©ation de l'organisation avec logo")
                org = Organizacion(
                    nombre="Test Persistence",
                    direccion="123 Test Street",
                    telefono="123-456-789",
                    email="test@persistence.com",
                    cif="B12345678",
                    logo_path=temp_logo
                )
                
                print(f"   üè¢ Nom: {org.nombre}")
                print(f"   üñºÔ∏è  Logo path avant save: '{org.logo_path}'")
                
                # √âtape 3: Sauvegarder
                print(f"\n3Ô∏è‚É£ Sauvegarde en base de donn√©es")
                org.save()
                print(f"   ‚úÖ Organisation sauvegard√©e")
                
                # √âtape 4: R√©cup√©rer imm√©diatement
                print(f"\n4Ô∏è‚É£ R√©cup√©ration imm√©diate")
                org_retrieved = Organizacion.get()
                
                print(f"   üè¢ Nom r√©cup√©r√©: '{org_retrieved.nombre}'")
                print(f"   üñºÔ∏è  Logo path r√©cup√©r√©: '{org_retrieved.logo_path}'")
                print(f"   üìÅ Fichier existe: {os.path.exists(org_retrieved.logo_path) if org_retrieved.logo_path else False}")
                
                # V√©rifications
                assert org_retrieved is not None, "Organisation non r√©cup√©r√©e"
                assert org_retrieved.nombre == org.nombre, f"Nom incorrect: {org_retrieved.nombre} != {org.nombre}"
                assert org_retrieved.logo_path == temp_logo, f"Logo path incorrect: '{org_retrieved.logo_path}' != '{temp_logo}'"
                assert os.path.exists(org_retrieved.logo_path), f"Fichier logo n'existe pas: {org_retrieved.logo_path}"
                
                print(f"   ‚úÖ R√©cup√©ration imm√©diate r√©ussie")
                
                # √âtape 5: Simuler red√©marrage (nouvelle instance DB)
                print(f"\n5Ô∏è‚É£ Simulation de red√©marrage")
                
                # Cr√©er une nouvelle connexion pour simuler un red√©marrage
                org_after_restart = Organizacion.get()
                
                print(f"   üè¢ Nom apr√®s red√©marrage: '{org_after_restart.nombre}'")
                print(f"   üñºÔ∏è  Logo path apr√®s red√©marrage: '{org_after_restart.logo_path}'")
                print(f"   üìÅ Fichier existe apr√®s red√©marrage: {os.path.exists(org_after_restart.logo_path) if org_after_restart.logo_path else False}")
                
                # V√©rifications apr√®s red√©marrage
                assert org_after_restart is not None, "Organisation non r√©cup√©r√©e apr√®s red√©marrage"
                assert org_after_restart.nombre == org.nombre, f"Nom incorrect apr√®s red√©marrage: {org_after_restart.nombre}"
                assert org_after_restart.logo_path == temp_logo, f"Logo path incorrect apr√®s red√©marrage: '{org_after_restart.logo_path}'"
                
                if org_after_restart.logo_path:
                    file_exists = os.path.exists(org_after_restart.logo_path)
                    print(f"   üìä Analyse du fichier:")
                    print(f"      - Chemin: {org_after_restart.logo_path}")
                    print(f"      - Existe: {file_exists}")
                    if file_exists:
                        file_size = os.path.getsize(org_after_restart.logo_path)
                        print(f"      - Taille: {file_size} bytes")
                    
                    assert file_exists, f"Fichier logo n'existe pas apr√®s red√©marrage: {org_after_restart.logo_path}"
                
                print(f"   ‚úÖ Persistance apr√®s red√©marrage r√©ussie")
                
                # √âtape 6: Test de mise √† jour
                print(f"\n6Ô∏è‚É£ Test de mise √† jour du logo")
                
                # Cr√©er un nouveau logo
                temp_dir2 = tempfile.mkdtemp()
                logo_path2 = os.path.join(temp_dir2, "test_logo2.png")
                img2 = Image.new('RGB', (100, 50), color='blue')
                img2.save(logo_path2)
                
                try:
                    # Mettre √† jour le logo
                    org_after_restart.logo_path = logo_path2
                    org_after_restart.save()
                    
                    # V√©rifier la mise √† jour
                    org_updated = Organizacion.get()
                    print(f"   üñºÔ∏è  Nouveau logo path: '{org_updated.logo_path}'")
                    print(f"   üìÅ Nouveau fichier existe: {os.path.exists(org_updated.logo_path) if org_updated.logo_path else False}")
                    
                    assert org_updated.logo_path == logo_path2, f"Mise √† jour logo √©chou√©e: '{org_updated.logo_path}'"
                    assert os.path.exists(org_updated.logo_path), f"Nouveau fichier logo n'existe pas: {org_updated.logo_path}"
                    
                    print(f"   ‚úÖ Mise √† jour du logo r√©ussie")
                    
                finally:
                    # Nettoyer le second logo
                    if os.path.exists(logo_path2):
                        os.remove(logo_path2)
                    os.rmdir(temp_dir2)
                
                print(f"\nüéâ Test de persistance complet r√©ussi!")
                
            finally:
                database.db = original_db
    
    def test_logo_path_null_handling(self):
        """Test de gestion des valeurs NULL pour logo_path"""
        with isolated_test_db("test_logo_null") as db:
            from database import database
            original_db = database.db
            
            try:
                database.db = db
                
                print(f"\nüîç Test de gestion des valeurs NULL")
                print(f"=" * 40)
                
                # Test 1: Organisation sans logo
                print(f"\n1Ô∏è‚É£ Organisation sans logo")
                org1 = Organizacion(
                    nombre="Sans Logo",
                    direccion="123 No Logo St",
                    telefono="123-456-789",
                    email="nologo@test.com",
                    cif="B11111111",
                    logo_path=""  # Logo vide
                )
                org1.save()
                
                org1_check = Organizacion.get()
                print(f"   üìä Logo path vide: '{org1_check.logo_path}'")
                assert org1_check.logo_path == "", f"Logo path vide non pr√©serv√©: '{org1_check.logo_path}'"
                print(f"   ‚úÖ Logo path vide correctement g√©r√©")
                
                # Test 2: Forcer NULL dans la base
                print(f"\n2Ô∏è‚É£ Test avec NULL forc√© en base")
                query = "UPDATE organizacion SET logo_path=NULL WHERE id=1"
                db.execute_query(query)
                
                org2_check = Organizacion.get()
                print(f"   üìä Logo path apr√®s NULL: '{org2_check.logo_path}'")
                assert org2_check.logo_path == "", f"Logo path NULL mal g√©r√©: '{org2_check.logo_path}'"
                print(f"   ‚úÖ Logo path NULL correctement converti en cha√Æne vide")
                
                print(f"\nüéâ Test de gestion NULL r√©ussi!")
                
            finally:
                database.db = original_db
    
    def test_database_schema_verification(self):
        """V√©rifier le sch√©ma de la base de donn√©es pour la table organizacion"""
        with isolated_test_db("test_schema_verification") as db:
            from database import database
            original_db = database.db
            
            try:
                database.db = db
                
                print(f"\nüîç V√©rification du sch√©ma de la base de donn√©es")
                print(f"=" * 50)
                
                # V√©rifier la structure de la table organizacion
                query = "PRAGMA table_info(organizacion)"
                columns = db.execute_query(query)
                
                print(f"\nüìä Structure de la table 'organizacion':")
                for i, col in enumerate(columns):
                    print(f"   {i}: {col[1]} ({col[2]}) - NULL: {col[3] == 0}")
                
                # V√©rifier que la colonne logo_path existe
                column_names = [col[1] for col in columns]
                assert 'logo_path' in column_names, "Colonne logo_path manquante"
                
                # Trouver l'index de logo_path
                logo_path_index = column_names.index('logo_path')
                print(f"\nüñºÔ∏è  Colonne logo_path trouv√©e √† l'index {logo_path_index}")
                
                # V√©rifier le type de la colonne
                logo_path_info = columns[logo_path_index]
                print(f"   Type: {logo_path_info[2]}")
                print(f"   Nullable: {logo_path_info[3] == 0}")
                
                print(f"\n‚úÖ Sch√©ma de base de donn√©es v√©rifi√©")
                
            finally:
                database.db = original_db


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
