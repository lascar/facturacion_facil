#!/usr/bin/env python3
"""
Test de validation de la solution pour la persistance du logo
Teste que le LogoManager copie correctement les logos dans un r√©pertoire permanent
"""

import sys
import os
import tempfile
import shutil
from pathlib import Path

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

def create_test_image(path, format='PNG'):
    """Cr√©er une image de test valide avec PIL"""
    try:
        from PIL import Image

        # Cr√©er une image simple 10x10 pixels
        if format.upper() == 'JPEG':
            img = Image.new('RGB', (10, 10), color='red')
            img.save(path, 'JPEG')
        else:
            img = Image.new('RGBA', (10, 10), color='blue')
            img.save(path, 'PNG')

    except Exception as e:
        print(f"Erreur cr√©ation image test: {e}")
        # Fallback: cr√©er un fichier vide
        with open(path, 'w') as f:
            f.write("")

def test_logo_manager_basic():
    """Test des fonctionnalit√©s de base du LogoManager"""
    print("üß™ Test: LogoManager fonctionnalit√©s de base")
    
    try:
        from utils.logo_manager import LogoManager
        
        # Cr√©er un r√©pertoire temporaire pour les tests
        temp_source_dir = tempfile.mkdtemp()
        temp_logo_path = os.path.join(temp_source_dir, 'test_logo.png')
        create_test_image(temp_logo_path)
        
        try:
            # Cr√©er LogoManager
            logo_manager = LogoManager()
            
            print(f"   üìÅ R√©pertoire logos: {logo_manager.logo_directory}")
            print(f"   üñºÔ∏è Image source: {temp_logo_path}")
            
            # Test 1: Sauvegarder logo
            print("\n   1Ô∏è‚É£ Test sauvegarde logo")
            
            saved_path = logo_manager.save_logo(temp_logo_path, "Test Company")
            
            assert saved_path is not None, "Sauvegarde logo √©chou√©e"
            assert os.path.exists(saved_path), f"Fichier sauvegard√© n'existe pas: {saved_path}"
            assert saved_path.startswith(logo_manager.logo_directory), f"Logo pas dans bon r√©pertoire: {saved_path}"
            
            print(f"   ‚úÖ Logo sauvegard√©: {os.path.basename(saved_path)}")
            
            # Test 2: V√©rifier info logo
            print("\n   2Ô∏è‚É£ Test info logo")
            
            info = logo_manager.get_logo_info(saved_path)
            
            assert info['exists'] == True, "Logo info indique qu'il n'existe pas"
            assert info['format'] == 'PNG', f"Format incorrect: {info['format']}"
            assert info['dimensions'] == (10, 10), f"Dimensions incorrectes: {info['dimensions']}"
            
            print(f"   ‚úÖ Info logo: {info['format']} {info['size_str']} ({info['size']} bytes)")
            
            # Test 3: Lister logos
            print("\n   3Ô∏è‚É£ Test listage logos")
            
            logos = logo_manager.list_logos()
            
            assert len(logos) >= 1, f"Aucun logo trouv√©: {logos}"
            assert saved_path in logos, f"Logo sauvegard√© non trouv√© dans liste: {saved_path}"
            
            print(f"   ‚úÖ Logos trouv√©s: {len(logos)}")
            
            # Test 4: Supprimer logo
            print("\n   4Ô∏è‚É£ Test suppression logo")
            
            success = logo_manager.remove_logo(saved_path)
            
            assert success == True, "Suppression logo √©chou√©e"
            assert not os.path.exists(saved_path), f"Logo toujours pr√©sent apr√®s suppression: {saved_path}"
            
            print("   ‚úÖ Logo supprim√© avec succ√®s")
            
            print("\nüéâ TOUS LES TESTS LOGOMANAGER PASSENT")
            return True
            
        finally:
            # Nettoyage
            try:
                if os.path.exists(temp_source_dir):
                    shutil.rmtree(temp_source_dir)
            except:
                pass
                
    except Exception as e:
        print(f"   ‚ùå ERREUR: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_logo_persistence_workflow():
    """Test du workflow complet de persistance du logo"""
    print("\nüß™ Test: Workflow complet persistance logo")
    
    try:
        from utils.logo_manager import LogoManager
        from database.models import Organizacion
        from database.database import Database
        
        # Cr√©er une base de donn√©es temporaire
        temp_db_path = tempfile.mktemp(suffix='.db')
        
        # Cr√©er image temporaire (simule s√©lection utilisateur)
        temp_source_dir = tempfile.mkdtemp()
        temp_source_path = os.path.join(temp_source_dir, 'user_selected_logo.png')
        create_test_image(temp_source_path)
        
        try:
            # Initialiser la base de donn√©es
            db = Database(temp_db_path)
            
            # Assurer que l'instance globale utilise notre DB temporaire
            from database.database import db as global_db
            global_db.db_path = temp_db_path
            
            logo_manager = LogoManager()
            
            print(f"   üìÅ DB temporaire: {temp_db_path}")
            print(f"   üñºÔ∏è Image utilisateur: {temp_source_path}")
            print(f"   üìÅ R√©pertoire logos: {logo_manager.logo_directory}")
            
            # Test 1: Simuler s√©lection et sauvegarde logo
            print("\n   1Ô∏è‚É£ Simulation s√©lection logo utilisateur")
            
            # Simuler ce que fait select_logo dans l'UI
            organization_name = "Test Company"
            permanent_logo_path = logo_manager.save_logo(temp_source_path, organization_name)
            
            assert permanent_logo_path is not None, "Sauvegarde logo √©chou√©e"
            assert os.path.exists(permanent_logo_path), f"Logo permanent n'existe pas: {permanent_logo_path}"
            
            print(f"   ‚úÖ Logo copi√© vers: {os.path.basename(permanent_logo_path)}")
            
            # Test 2: Sauvegarder organisation avec logo permanent
            print("\n   2Ô∏è‚É£ Sauvegarde organisation avec logo")
            
            org = Organizacion(
                nombre=organization_name,
                cif="B12345678",
                logo_path=permanent_logo_path
            )
            org.save()
            
            print(f"   ‚úÖ Organisation sauvegard√©e avec logo: {permanent_logo_path}")
            
            # Test 3: Simuler fermeture/r√©ouverture application
            print("\n   3Ô∏è‚É£ Simulation red√©marrage application")
            
            # Supprimer l'image source (simule suppression fichier temporaire)
            os.remove(temp_source_path)
            print("   üìù Image source supprim√©e (simulation)")
            
            # Nouvelle instance DB (simule red√©marrage)
            db2 = Database(temp_db_path)
            
            # Recharger organisation
            org_reloaded = Organizacion.get()
            
            print(f"   üìä Logo apr√®s red√©marrage: {org_reloaded.logo_path}")
            assert org_reloaded.logo_path == permanent_logo_path, f"Logo path incorrect: {org_reloaded.logo_path}"
            
            # Test 4: V√©rifier que le logo permanent existe toujours
            print("\n   4Ô∏è‚É£ V√©rification persistance fichier logo")
            
            assert os.path.exists(org_reloaded.logo_path), f"Logo permanent n'existe plus: {org_reloaded.logo_path}"
            
            # V√©rifier que c'est bien dans le r√©pertoire g√©r√©
            assert org_reloaded.logo_path.startswith(logo_manager.logo_directory), f"Logo pas dans r√©pertoire g√©r√©: {org_reloaded.logo_path}"
            
            print("   ‚úÖ Logo permanent existe et persiste")
            
            # Test 5: V√©rifier info du logo persistant
            print("\n   5Ô∏è‚É£ Validation info logo persistant")
            
            info = logo_manager.get_logo_info(org_reloaded.logo_path)
            
            assert info['exists'] == True, "Logo persistant n'existe pas selon info"
            assert info['format'] == 'PNG', f"Format logo persistant incorrect: {info['format']}"
            
            print(f"   ‚úÖ Logo persistant valide: {info['format']} {info['size']}")
            
            print("\nüéâ WORKFLOW PERSISTANCE LOGO R√âUSSI")
            print("   üí° Le logo persiste m√™me apr√®s suppression du fichier source")
            return True
            
        finally:
            # Nettoyage
            try:
                if os.path.exists(temp_db_path):
                    os.remove(temp_db_path)
                if os.path.exists(temp_source_dir):
                    shutil.rmtree(temp_source_dir)
                # Nettoyer logos de test
                logo_manager = LogoManager()
                for logo in logo_manager.list_logos():
                    if "test" in logo.lower():
                        logo_manager.remove_logo(logo)
            except:
                pass
                
    except Exception as e:
        print(f"   ‚ùå ERREUR: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_logo_update_scenario():
    """Test du sc√©nario de mise √† jour de logo"""
    print("\nüß™ Test: Sc√©nario mise √† jour logo")
    
    try:
        from utils.logo_manager import LogoManager
        
        # Cr√©er deux images diff√©rentes
        temp_source_dir = tempfile.mkdtemp()
        logo1_path = os.path.join(temp_source_dir, 'logo1.png')
        logo2_path = os.path.join(temp_source_dir, 'logo2.jpg')
        
        # Cr√©er images avec contenus diff√©rents
        create_test_image(logo1_path, 'PNG')
        create_test_image(logo2_path, 'JPEG')
        
        try:
            logo_manager = LogoManager()
            
            print(f"   üñºÔ∏è Logo 1: {logo1_path}")
            print(f"   üñºÔ∏è Logo 2: {logo2_path}")
            
            # Test 1: Sauvegarder premier logo
            print("\n   1Ô∏è‚É£ Sauvegarde premier logo")
            
            saved_logo1 = logo_manager.save_logo(logo1_path, "Company")
            assert saved_logo1 is not None, "Sauvegarde logo1 √©chou√©e"
            
            print(f"   ‚úÖ Logo 1 sauvegard√©: {os.path.basename(saved_logo1)}")
            
            # Test 2: Mettre √† jour avec deuxi√®me logo
            print("\n   2Ô∏è‚É£ Mise √† jour avec deuxi√®me logo")
            
            saved_logo2 = logo_manager.update_logo(saved_logo1, logo2_path, "Company")
            assert saved_logo2 is not None, "Mise √† jour logo √©chou√©e"
            assert saved_logo2 != saved_logo1, "Nouveau logo identique √† l'ancien"
            
            print(f"   ‚úÖ Logo mis √† jour: {os.path.basename(saved_logo2)}")
            
            # Test 3: V√©rifier que l'ancien logo est supprim√©
            print("\n   3Ô∏è‚É£ V√©rification suppression ancien logo")
            
            assert not os.path.exists(saved_logo1), f"Ancien logo toujours pr√©sent: {saved_logo1}"
            assert os.path.exists(saved_logo2), f"Nouveau logo n'existe pas: {saved_logo2}"
            
            print("   ‚úÖ Ancien logo supprim√©, nouveau logo pr√©sent")
            
            # Test 4: V√©rifier format du nouveau logo
            print("\n   4Ô∏è‚É£ Validation nouveau logo")
            
            info = logo_manager.get_logo_info(saved_logo2)
            # Le LogoManager devrait pr√©server le format original
            expected_format = 'JPEG'  # Le JPEG devrait √™tre pr√©serv√©
            
            print(f"   üìä Format nouveau logo: {info['format']}")
            # Note: PIL peut convertir certains formats, donc on v√©rifie juste que c'est valide
            assert info['exists'] == True, "Nouveau logo invalide"
            
            print("   ‚úÖ Nouveau logo valide")
            
            # Nettoyage
            logo_manager.remove_logo(saved_logo2)
            
            print("\nüéâ MISE √Ä JOUR LOGO R√âUSSIE")
            return True
            
        finally:
            # Nettoyage
            try:
                if os.path.exists(temp_source_dir):
                    shutil.rmtree(temp_source_dir)
            except:
                pass
                
    except Exception as e:
        print(f"   ‚ùå ERREUR: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üîß Tests de validation - Solution persistance logo")
    print("=" * 55)
    
    success1 = test_logo_manager_basic()
    success2 = test_logo_persistence_workflow()
    success3 = test_logo_update_scenario()
    
    if success1 and success2 and success3:
        print("\nüéâ TOUS LES TESTS DE VALIDATION PASSENT")
        print("\n‚úÖ SOLUTION VALID√âE:")
        print("   ‚Ä¢ LogoManager copie les logos dans un r√©pertoire permanent")
        print("   ‚Ä¢ Les logos persistent m√™me si le fichier source est supprim√©")
        print("   ‚Ä¢ Mise √† jour de logos fonctionne correctement")
        print("   ‚Ä¢ Nettoyage automatique des logos orphelins")
        print("\nüí° Le probl√®me de persistance du logo est r√©solu !")
        sys.exit(0)
    else:
        print("\n‚ùå CERTAINS TESTS √âCHOUENT")
        sys.exit(1)
