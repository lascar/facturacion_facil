#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test d'int√©gration pour le LogoManager et la persistance du logo
"""

import os
import tempfile
import pytest
from PIL import Image
from database.models import Organizacion
from utils.logo_manager import LogoManager
from test.utils.test_database_manager import isolated_test_db


class TestLogoManagerIntegration:
    """Tests d'int√©gration pour LogoManager et persistance"""
    
    @pytest.fixture
    def temp_logo(self):
        """Cr√©e un logo temporaire pour les tests"""
        temp_dir = tempfile.mkdtemp()
        logo_path = os.path.join(temp_dir, "source_logo.png")
        
        # Cr√©er une image de test
        img = Image.new('RGB', (200, 100), color='green')
        img.save(logo_path)
        
        yield logo_path
        
        # Nettoyage
        if os.path.exists(logo_path):
            os.remove(logo_path)
        os.rmdir(temp_dir)
    
    def test_logo_manager_workflow_complete(self, temp_logo):
        """Test complet du workflow LogoManager + Organizacion"""
        with isolated_test_db("test_logo_manager_workflow") as db:
            from database import database
            original_db = database.db
            
            try:
                database.db = db
                
                print(f"\nüîç Test complet LogoManager + Organizacion")
                print(f"=" * 50)
                
                # √âtape 1: Initialiser LogoManager
                print(f"\n1Ô∏è‚É£ Initialisation du LogoManager")
                logo_manager = LogoManager()
                
                print(f"   üìÅ R√©pertoire logos: {logo_manager.logo_directory}")
                print(f"   ‚úÖ R√©pertoire existe: {os.path.exists(logo_manager.logo_directory)}")
                
                # V√©rifier que le r√©pertoire est cr√©√©
                assert os.path.exists(logo_manager.logo_directory), "R√©pertoire logos non cr√©√©"
                
                # √âtape 2: Sauvegarder logo avec LogoManager
                print(f"\n2Ô∏è‚É£ Sauvegarde du logo avec LogoManager")
                print(f"   üìÅ Logo source: {temp_logo}")
                print(f"   üìä Taille source: {os.path.getsize(temp_logo)} bytes")
                
                permanent_logo_path = logo_manager.save_logo(temp_logo, "Test Company")
                
                print(f"   üìÅ Logo permanent: {permanent_logo_path}")
                print(f"   ‚úÖ Sauvegarde r√©ussie: {permanent_logo_path is not None}")
                
                assert permanent_logo_path is not None, "√âchec sauvegarde logo"
                assert os.path.exists(permanent_logo_path), f"Logo permanent n'existe pas: {permanent_logo_path}"
                assert permanent_logo_path != temp_logo, "Logo pas copi√© (m√™me chemin)"
                
                # V√©rifier que le logo est dans le bon r√©pertoire
                assert logo_manager.logo_directory in permanent_logo_path, "Logo pas dans le r√©pertoire permanent"
                
                print(f"   üìä Taille permanent: {os.path.getsize(permanent_logo_path)} bytes")
                
                # √âtape 3: Cr√©er organisation avec logo permanent
                print(f"\n3Ô∏è‚É£ Cr√©ation organisation avec logo permanent")
                org = Organizacion(
                    nombre="Test Company LogoManager",
                    direccion="123 LogoManager Street",
                    telefono="123-456-789",
                    email="test@logomanager.com",
                    cif="B12345678",
                    logo_path=permanent_logo_path
                )
                org.save()
                
                print(f"   üè¢ Organisation cr√©√©e: {org.nombre}")
                print(f"   üñºÔ∏è  Logo path: {org.logo_path}")
                
                # √âtape 4: V√©rifier persistance imm√©diate
                print(f"\n4Ô∏è‚É£ V√©rification persistance imm√©diate")
                org_check = Organizacion.get()
                
                print(f"   üè¢ Nom r√©cup√©r√©: '{org_check.nombre}'")
                print(f"   üñºÔ∏è  Logo path r√©cup√©r√©: '{org_check.logo_path}'")
                print(f"   üìÅ Fichier existe: {os.path.exists(org_check.logo_path) if org_check.logo_path else False}")
                
                assert org_check.logo_path == permanent_logo_path, f"Logo path incorrect: {org_check.logo_path}"
                assert os.path.exists(org_check.logo_path), f"Fichier logo n'existe pas: {org_check.logo_path}"
                
                # √âtape 5: Simuler red√©marrage de l'application
                print(f"\n5Ô∏è‚É£ Simulation red√©marrage application")
                
                # Cr√©er un nouveau LogoManager (simule red√©marrage)
                logo_manager_2 = LogoManager()
                print(f"   üìÅ Nouveau r√©pertoire logos: {logo_manager_2.logo_directory}")
                print(f"   ‚úÖ M√™me r√©pertoire: {logo_manager_2.logo_directory == logo_manager.logo_directory}")
                
                # R√©cup√©rer organisation apr√®s "red√©marrage"
                org_after_restart = Organizacion.get()
                
                print(f"   üè¢ Nom apr√®s red√©marrage: '{org_after_restart.nombre}'")
                print(f"   üñºÔ∏è  Logo path apr√®s red√©marrage: '{org_after_restart.logo_path}'")
                print(f"   üìÅ Fichier existe apr√®s red√©marrage: {os.path.exists(org_after_restart.logo_path) if org_after_restart.logo_path else False}")
                
                assert org_after_restart.logo_path == permanent_logo_path, "Logo path perdu apr√®s red√©marrage"
                assert os.path.exists(org_after_restart.logo_path), "Fichier logo perdu apr√®s red√©marrage"
                
                # √âtape 6: Test mise √† jour du logo
                print(f"\n6Ô∏è‚É£ Test mise √† jour du logo")
                
                # Cr√©er un nouveau logo temporaire
                temp_dir2 = tempfile.mkdtemp()
                logo_path2 = os.path.join(temp_dir2, "new_logo.png")
                img2 = Image.new('RGB', (200, 100), color='blue')
                img2.save(logo_path2)
                
                try:
                    # Mettre √† jour avec LogoManager
                    new_permanent_logo = logo_manager.update_logo(
                        org_after_restart.logo_path, 
                        logo_path2, 
                        "Test Company Updated"
                    )
                    
                    print(f"   üñºÔ∏è  Nouveau logo permanent: {new_permanent_logo}")
                    print(f"   ‚úÖ Mise √† jour r√©ussie: {new_permanent_logo is not None}")
                    
                    assert new_permanent_logo is not None, "√âchec mise √† jour logo"
                    assert os.path.exists(new_permanent_logo), "Nouveau logo n'existe pas"
                    assert not os.path.exists(permanent_logo_path), "Ancien logo pas supprim√©"
                    
                    # Sauvegarder la nouvelle organisation
                    org_after_restart.logo_path = new_permanent_logo
                    org_after_restart.save()
                    
                    # V√©rifier la persistance de la mise √† jour
                    org_updated = Organizacion.get()
                    print(f"   üñºÔ∏è  Logo final en base: '{org_updated.logo_path}'")
                    print(f"   üìÅ Fichier final existe: {os.path.exists(org_updated.logo_path) if org_updated.logo_path else False}")
                    
                    assert org_updated.logo_path == new_permanent_logo, "Mise √† jour logo pas persist√©e"
                    assert os.path.exists(org_updated.logo_path), "Fichier logo final n'existe pas"
                    
                    print(f"   ‚úÖ Mise √† jour persist√©e avec succ√®s")
                    
                finally:
                    # Nettoyer le logo temporaire 2
                    if os.path.exists(logo_path2):
                        os.remove(logo_path2)
                    os.rmdir(temp_dir2)
                
                # √âtape 7: Test nettoyage
                print(f"\n7Ô∏è‚É£ Test nettoyage des logos orphelins")
                
                # Lister les logos avant nettoyage
                logos_before = logo_manager.list_logos()
                print(f"   üìä Logos avant nettoyage: {len(logos_before)}")
                
                # Nettoyer (garder seulement le logo actuel)
                cleaned_count = logo_manager.cleanup_orphaned_logos(org_updated.logo_path)
                print(f"   üóëÔ∏è  Logos nettoy√©s: {cleaned_count}")
                
                # Lister les logos apr√®s nettoyage
                logos_after = logo_manager.list_logos()
                print(f"   üìä Logos apr√®s nettoyage: {len(logos_after)}")
                
                # V√©rifier que le logo actuel existe toujours
                assert os.path.exists(org_updated.logo_path), "Logo actuel supprim√© par erreur"
                
                print(f"\nüéâ Test complet LogoManager r√©ussi!")
                
            finally:
                database.db = original_db
    
    def test_logo_manager_directory_creation(self):
        """Test de cr√©ation du r√©pertoire logos"""
        print(f"\nüîç Test cr√©ation r√©pertoire LogoManager")
        print(f"=" * 40)
        
        # Cr√©er LogoManager
        logo_manager = LogoManager()
        
        print(f"   üìÅ R√©pertoire: {logo_manager.logo_directory}")
        print(f"   ‚úÖ Existe: {os.path.exists(logo_manager.logo_directory)}")
        print(f"   ‚úÖ Accessible en √©criture: {os.access(logo_manager.logo_directory, os.W_OK)}")
        
        # V√©rifications
        assert os.path.exists(logo_manager.logo_directory), "R√©pertoire logos non cr√©√©"
        assert os.path.isdir(logo_manager.logo_directory), "Chemin logos n'est pas un r√©pertoire"
        assert os.access(logo_manager.logo_directory, os.W_OK), "R√©pertoire logos non accessible en √©criture"
        
        print(f"   ‚úÖ R√©pertoire LogoManager fonctionnel")
    
    def test_logo_persistence_real_scenario(self, temp_logo):
        """Test de sc√©nario r√©el : s√©lection logo + red√©marrage"""
        with isolated_test_db("test_real_scenario") as db:
            from database import database
            original_db = database.db
            
            try:
                database.db = db
                
                print(f"\nüîç Test sc√©nario r√©el de persistance")
                print(f"=" * 40)
                
                # Simuler le workflow de l'interface utilisateur
                logo_manager = LogoManager()
                
                # 1. Utilisateur s√©lectionne un logo (simule select_logo())
                print(f"\n1Ô∏è‚É£ Simulation s√©lection logo utilisateur")
                organization_name = "Ma Super Entreprise"
                permanent_logo = logo_manager.save_logo(temp_logo, organization_name)
                
                print(f"   üìÅ Logo source: {temp_logo}")
                print(f"   üìÅ Logo permanent: {permanent_logo}")
                print(f"   ‚úÖ Copie r√©ussie: {permanent_logo is not None}")
                
                assert permanent_logo is not None, "√âchec copie logo"
                assert os.path.exists(permanent_logo), "Logo permanent n'existe pas"
                
                # 2. Utilisateur sauvegarde l'organisation (simule save_organizacion())
                print(f"\n2Ô∏è‚É£ Simulation sauvegarde organisation")
                org = Organizacion(
                    nombre=organization_name,
                    direccion="123 Rue de l'Entreprise",
                    telefono="+33 1 23 45 67 89",
                    email="contact@superentreprise.fr",
                    cif="FR12345678901",
                    logo_path=permanent_logo
                )
                org.save()
                
                print(f"   üè¢ Organisation sauvegard√©e: {org.nombre}")
                print(f"   üñºÔ∏è  Logo path: {org.logo_path}")
                
                # 3. Utilisateur ferme l'application
                print(f"\n3Ô∏è‚É£ Simulation fermeture application")
                print(f"   üíæ Donn√©es sauvegard√©es en base")
                
                # 4. Utilisateur red√©marre l'application (simule load_organizacion_data())
                print(f"\n4Ô∏è‚É£ Simulation red√©marrage et chargement")
                
                # Nouveau LogoManager (simule nouveau d√©marrage)
                logo_manager_restart = LogoManager()
                
                # Charger organisation depuis la base
                org_loaded = Organizacion.get()
                
                print(f"   üè¢ Organisation charg√©e: {org_loaded.nombre}")
                print(f"   üñºÔ∏è  Logo path charg√©: {org_loaded.logo_path}")
                print(f"   üìÅ Fichier logo existe: {os.path.exists(org_loaded.logo_path) if org_loaded.logo_path else False}")
                
                # V√©rifications finales
                assert org_loaded.nombre == organization_name, "Nom organisation perdu"
                assert org_loaded.logo_path == permanent_logo, "Chemin logo perdu"
                assert os.path.exists(org_loaded.logo_path), "Fichier logo perdu"
                
                # 5. V√©rifier que le logo peut √™tre charg√© dans l'interface
                print(f"\n5Ô∏è‚É£ Simulation chargement logo dans interface")
                
                # Simuler load_logo_image()
                if org_loaded.logo_path and os.path.exists(org_loaded.logo_path):
                    # Tester ouverture de l'image
                    try:
                        with Image.open(org_loaded.logo_path) as img:
                            print(f"   üñºÔ∏è  Image charg√©e: {img.size} pixels")
                            print(f"   üé® Format: {img.format}")
                        logo_loadable = True
                    except Exception as e:
                        print(f"   ‚ùå Erreur chargement image: {e}")
                        logo_loadable = False
                else:
                    logo_loadable = False
                
                assert logo_loadable, "Logo non chargeable dans l'interface"
                
                print(f"\nüéâ Sc√©nario r√©el de persistance r√©ussi!")
                print(f"   ‚úÖ Logo s√©lectionn√© et copi√©")
                print(f"   ‚úÖ Organisation sauvegard√©e")
                print(f"   ‚úÖ Donn√©es persist√©es apr√®s red√©marrage")
                print(f"   ‚úÖ Logo chargeable dans l'interface")
                
            finally:
                database.db = original_db


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
