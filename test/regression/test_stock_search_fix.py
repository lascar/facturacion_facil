#!/usr/bin/env python3
"""
Test de r√©gression pour corriger le probl√®me de recherche dans la section stock
Diagnostique et corrige le probl√®me de filtrage des produits
"""

import sys
import os
import tempfile
import shutil

# Ajouter le r√©pertoire racine au path
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

def test_stock_get_all_format():
    """Test du format des donn√©es retourn√©es par Stock.get_all()"""
    print("üß™ Test: Format des donn√©es Stock.get_all()")
    
    try:
        from database.models import Stock, Producto
        from database.database import Database
        
        # Cr√©er une base de donn√©es temporaire
        temp_db_path = tempfile.mktemp(suffix='.db')
        
        try:
            # Initialiser la base de donn√©es
            db = Database(temp_db_path)
            
            # Assurer que l'instance globale utilise notre DB temporaire
            from database.database import db as global_db
            global_db.db_path = temp_db_path
            
            print(f"   üìÅ Base de donn√©es temporaire: {temp_db_path}")
            
            # Cr√©er quelques produits de test
            productos_test = [
                ("Producto Test 1", "TEST-001", 10.0, "Categoria A"),
                ("Producto Test 2", "TEST-002", 20.0, "Categoria B"),
                ("B√∫squeda Test", "SEARCH-001", 15.0, "Categoria C")
            ]
            
            for nombre, referencia, precio, categoria in productos_test:
                producto = Producto(
                    nombre=nombre,
                    referencia=referencia,
                    precio=precio,
                    categoria=categoria
                )
                producto.save()
                print(f"   ‚úÖ Producto creado: {nombre} ({referencia})")
            
            # Test 1: V√©rifier le format de Stock.get_all()
            print("\n   1Ô∏è‚É£ Test format Stock.get_all()")
            
            stock_data = Stock.get_all()
            print(f"   üìä Productos con stock: {len(stock_data)}")
            
            if stock_data:
                first_row = stock_data[0]
                print(f"   üìã Formato primera fila: {first_row}")
                print(f"   üìã Tipo de datos: {[type(x) for x in first_row]}")
                
                # Verificar que tiene 4 elementos
                assert len(first_row) == 4, f"Esperado 4 elementos, obtenido {len(first_row)}"
                
                producto_id, cantidad, nombre, referencia = first_row
                print(f"   üìä producto_id: {producto_id} (tipo: {type(producto_id)})")
                print(f"   üìä cantidad: {cantidad} (tipo: {type(cantidad)})")
                print(f"   üìä nombre: {nombre} (tipo: {type(nombre)})")
                print(f"   üìä referencia: {referencia} (tipo: {type(referencia)})")
                
                # Verificar que los tipos son correctos
                assert isinstance(producto_id, int), f"producto_id debe ser int, es {type(producto_id)}"
                assert isinstance(cantidad, int), f"cantidad debe ser int, es {type(cantidad)}"
                assert isinstance(nombre, str), f"nombre debe ser str, es {type(nombre)}"
                assert isinstance(referencia, str), f"referencia debe ser str, es {type(referencia)}"
                
                print("   ‚úÖ Formato de datos correcto")
            
            # Test 2: Simular el filtrado como en StockWindow
            print("\n   2Ô∏è‚É£ Test simulaci√≥n filtrado StockWindow")
            
            # Simular la estructura de datos de StockWindow
            stock_data_formatted = []
            for row in stock_data:
                producto_id, cantidad, nombre, referencia = row
                
                stock_data_formatted.append({
                    'producto_id': producto_id,
                    'nombre': nombre,
                    'referencia': referencia,
                    'cantidad': cantidad,
                    'fecha_actualizacion': 'N/A'  # Simplificado para el test
                })
            
            print(f"   üìä Datos formateados: {len(stock_data_formatted)}")
            
            # Test de filtrado por texto
            search_text = "test"
            filtered_data = [
                item for item in stock_data_formatted
                if search_text.lower() in item['nombre'].lower() or
                   search_text.lower() in item['referencia'].lower()
            ]
            
            print(f"   üîç B√∫squeda '{search_text}': {len(filtered_data)} resultados")
            for item in filtered_data:
                print(f"      - {item['nombre']} ({item['referencia']})")
            
            # Deber√≠a encontrar los productos con "Test" en el nombre
            assert len(filtered_data) >= 2, f"Deber√≠a encontrar al menos 2 productos, encontr√≥ {len(filtered_data)}"
            
            # Test de filtrado por referencia
            search_text = "search"
            filtered_data = [
                item for item in stock_data_formatted
                if search_text.lower() in item['nombre'].lower() or
                   search_text.lower() in item['referencia'].lower()
            ]
            
            print(f"   üîç B√∫squeda '{search_text}': {len(filtered_data)} resultados")
            for item in filtered_data:
                print(f"      - {item['nombre']} ({item['referencia']})")
            
            # Deber√≠a encontrar el producto con "SEARCH" en la referencia
            assert len(filtered_data) >= 1, f"Deber√≠a encontrar al menos 1 producto, encontr√≥ {len(filtered_data)}"
            
            print("   ‚úÖ Filtrado funciona correctamente")
            
            print("\nüéâ TODOS LOS TESTS PASAN - El formato de datos es correcto")
            return True
            
        finally:
            # Nettoyage
            try:
                if os.path.exists(temp_db_path):
                    os.remove(temp_db_path)
            except:
                pass
                
    except Exception as e:
        print(f"   ‚ùå ERREUR: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_stock_search_edge_cases():
    """Test des cas limites pour la recherche stock"""
    print("\nüß™ Test: Cas limites recherche stock")
    
    try:
        from database.models import Stock, Producto
        from database.database import Database
        
        # Cr√©er une base de donn√©es temporaire
        temp_db_path = tempfile.mktemp(suffix='.db')
        
        try:
            # Initialiser la base de donn√©es
            db = Database(temp_db_path)
            
            # Assurer que l'instance globale utilise notre DB temporaire
            from database.database import db as global_db
            global_db.db_path = temp_db_path
            
            # Cr√©er produits avec caract√®res sp√©ciaux
            productos_especiales = [
                ("Producto con √ë", "REF-√ë01", 10.0, "Categor√≠a"),
                ("PRODUCTO MAY√öSCULAS", "REF-MAY", 20.0, "CATEGORIA"),
                ("producto min√∫sculas", "ref-min", 15.0, "categoria"),
                ("Producto con n√∫meros 123", "REF-123", 25.0, "Cat123")
            ]
            
            for nombre, referencia, precio, categoria in productos_especiales:
                producto = Producto(
                    nombre=nombre,
                    referencia=referencia,
                    precio=precio,
                    categoria=categoria
                )
                producto.save()
            
            # Obtener datos
            stock_data = Stock.get_all()
            stock_data_formatted = []
            for row in stock_data:
                producto_id, cantidad, nombre, referencia = row
                stock_data_formatted.append({
                    'producto_id': producto_id,
                    'nombre': nombre,
                    'referencia': referencia,
                    'cantidad': cantidad,
                    'fecha_actualizacion': 'N/A'
                })
            
            # Test 1: B√∫squeda insensible a may√∫sculas/min√∫sculas
            print("\n   1Ô∏è‚É£ Test b√∫squeda insensible a may√∫sculas")
            
            search_text = "PRODUCTO"
            filtered_data = [
                item for item in stock_data_formatted
                if search_text.lower() in item['nombre'].lower() or
                   search_text.lower() in item['referencia'].lower()
            ]
            
            print(f"   üîç B√∫squeda '{search_text}': {len(filtered_data)} resultados")
            assert len(filtered_data) >= 3, f"Deber√≠a encontrar al menos 3 productos, encontr√≥ {len(filtered_data)}"
            print("   ‚úÖ B√∫squeda insensible a may√∫sculas funciona")
            
            # Test 2: B√∫squeda con caracteres especiales
            print("\n   2Ô∏è‚É£ Test b√∫squeda con caracteres especiales")
            
            search_text = "√±"
            filtered_data = [
                item for item in stock_data_formatted
                if search_text.lower() in item['nombre'].lower() or
                   search_text.lower() in item['referencia'].lower()
            ]
            
            print(f"   üîç B√∫squeda '{search_text}': {len(filtered_data)} resultados")
            assert len(filtered_data) >= 1, f"Deber√≠a encontrar al menos 1 producto, encontr√≥ {len(filtered_data)}"
            print("   ‚úÖ B√∫squeda con caracteres especiales funciona")
            
            # Test 3: B√∫squeda por n√∫meros
            print("\n   3Ô∏è‚É£ Test b√∫squeda por n√∫meros")
            
            search_text = "123"
            filtered_data = [
                item for item in stock_data_formatted
                if search_text.lower() in item['nombre'].lower() or
                   search_text.lower() in item['referencia'].lower()
            ]
            
            print(f"   üîç B√∫squeda '{search_text}': {len(filtered_data)} resultados")
            assert len(filtered_data) >= 1, f"Deber√≠a encontrar al menos 1 producto, encontr√≥ {len(filtered_data)}"
            print("   ‚úÖ B√∫squeda por n√∫meros funciona")
            
            # Test 4: B√∫squeda vac√≠a
            print("\n   4Ô∏è‚É£ Test b√∫squeda vac√≠a")
            
            search_text = ""
            if not search_text:
                filtered_data = stock_data_formatted.copy()
            else:
                filtered_data = [
                    item for item in stock_data_formatted
                    if search_text.lower() in item['nombre'].lower() or
                       search_text.lower() in item['referencia'].lower()
                ]
            
            print(f"   üîç B√∫squeda vac√≠a: {len(filtered_data)} resultados")
            assert len(filtered_data) == len(stock_data_formatted), "B√∫squeda vac√≠a debe mostrar todos los productos"
            print("   ‚úÖ B√∫squeda vac√≠a funciona")
            
            print("\nüéâ TODOS LOS TESTS CAS LIMITES PASSEN")
            return True
            
        finally:
            # Nettoyage
            try:
                if os.path.exists(temp_db_path):
                    os.remove(temp_db_path)
            except:
                pass
                
    except Exception as e:
        print(f"   ‚ùå ERREUR: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_stock_search_with_none_values():
    """Test de la recherche avec des valeurs None ou vides"""
    print("\nüß™ Test: Recherche avec valeurs None/vides")
    
    try:
        # Test de la logique de filtrage avec des valeurs probl√©matiques
        stock_data_formatted = [
            {'nombre': 'Producto Normal', 'referencia': 'REF-001', 'cantidad': 10},
            {'nombre': None, 'referencia': 'REF-002', 'cantidad': 5},
            {'nombre': 'Producto Vacio', 'referencia': '', 'cantidad': 0},
            {'nombre': '', 'referencia': 'REF-004', 'cantidad': 15},
        ]
        
        print(f"   üìä Datos de test: {len(stock_data_formatted)} productos")
        
        # Test de filtrage robuste
        search_text = "normal"
        filtered_data = []
        
        for item in stock_data_formatted:
            nombre = item.get('nombre', '') or ''  # G√©rer None
            referencia = item.get('referencia', '') or ''  # G√©rer None
            
            if (search_text.lower() in nombre.lower() or
                search_text.lower() in referencia.lower()):
                filtered_data.append(item)
        
        print(f"   üîç B√∫squeda '{search_text}': {len(filtered_data)} resultados")
        assert len(filtered_data) == 1, f"Deber√≠a encontrar 1 producto, encontr√≥ {len(filtered_data)}"
        
        # Test avec recherche vide
        search_text = ""
        if not search_text:
            filtered_data = stock_data_formatted.copy()
        
        print(f"   üîç B√∫squeda vac√≠a: {len(filtered_data)} resultados")
        assert len(filtered_data) == 4, f"Deber√≠a mostrar todos los productos"
        
        print("   ‚úÖ Gestion des valeurs None/vides fonctionne")
        return True
        
    except Exception as e:
        print(f"   ‚ùå ERREUR: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üîß Tests de r√©gression - Correction recherche stock")
    print("=" * 55)
    
    success1 = test_stock_get_all_format()
    success2 = test_stock_search_edge_cases()
    success3 = test_stock_search_with_none_values()
    
    if success1 and success2 and success3:
        print("\nüéâ TOUS LES TESTS PASSENT")
        print("\n‚úÖ DIAGNOSTIC COMPLET:")
        print("   ‚Ä¢ Format des donn√©es Stock.get_all() : Correct")
        print("   ‚Ä¢ Logique de filtrage : Fonctionne")
        print("   ‚Ä¢ Cas limites : G√©r√©s correctement")
        print("   ‚Ä¢ Valeurs None/vides : G√©r√©es")
        print("\nüí° Le probl√®me pourrait √™tre ailleurs...")
        sys.exit(0)
    else:
        print("\n‚ùå CERTAINS TESTS √âCHOUENT")
        sys.exit(1)
